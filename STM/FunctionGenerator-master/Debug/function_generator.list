
function_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004924  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08004ab0  08004ab0  00014ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce8  08004ce8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ce8  08004ce8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ce8  08004ce8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000000c  08004cfc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08004cfc  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b60d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a1f  00000000  00000000  0002b649  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  0002d068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002db98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c031  00000000  00000000  0002e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000087d6  00000000  00000000  0004a621  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a46fd  00000000  00000000  00052df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f74f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003288  00000000  00000000  000f7570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a94 	.word	0x08004a94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a94 	.word	0x08004a94

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	0000      	movs	r0, r0
	...

08000ba8 <generateFSK2D>:
		sine_val[i] = ( (sin(2*PI*5*i/Ns) + 1.1) )*(4096/8);
	}
}

void generateFSK2D(uint32_t* out_fsk_modu, int* in_bit_sequence, int num_bits, float fs, int samples_per_bit, float f0, float f1)
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b096      	sub	sp, #88	; 0x58
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	61f8      	str	r0, [r7, #28]
 8000bb0:	61b9      	str	r1, [r7, #24]
 8000bb2:	617a      	str	r2, [r7, #20]
 8000bb4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	edc7 0a02 	vstr	s1, [r7, #8]
 8000bbe:	ed87 1a01 	vstr	s2, [r7, #4]
  float f_mux;

  float fadd = 200*FACTOR;
 8000bc2:	4bab      	ldr	r3, [pc, #684]	; (8000e70 <generateFSK2D+0x2c8>)
 8000bc4:	63fb      	str	r3, [r7, #60]	; 0x3c

  const int fhss_num = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  float fhss_0[ 2 ] = {0};
 8000bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
  float fhss_1[ 2 ] = {0};
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]

  int tally_0 = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	657b      	str	r3, [r7, #84]	; 0x54
  int tally_1 = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	653b      	str	r3, [r7, #80]	; 0x50

  for(int m = fhss_num; m >= 0; m--)
 8000be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bea:	e02c      	b.n	8000c46 <generateFSK2D+0x9e>
  {
	  fhss_0[m] = f0 + m*fadd;
 8000bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bee:	ee07 3a90 	vmov	s15, r3
 8000bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000c0e:	4413      	add	r3, r2
 8000c10:	3b30      	subs	r3, #48	; 0x30
 8000c12:	edc3 7a00 	vstr	s15, [r3]
	  fhss_1[m] = f1 - m*fadd;
 8000c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c18:	ee07 3a90 	vmov	s15, r3
 8000c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c20:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c28:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000c38:	4413      	add	r3, r2
 8000c3a:	3b38      	subs	r3, #56	; 0x38
 8000c3c:	edc3 7a00 	vstr	s15, [r3]
  for(int m = fhss_num; m >= 0; m--)
 8000c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c42:	3b01      	subs	r3, #1
 8000c44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dacf      	bge.n	8000bec <generateFSK2D+0x44>
  }

  for (int i = 0; i < num_bits; i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c50:	e0fb      	b.n	8000e4a <generateFSK2D+0x2a2>
  {
    int index = (int)(i * samples_per_bit);
 8000c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	fb02 f303 	mul.w	r3, r2, r3
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34

    if (in_bit_sequence[i] == 0)
 8000c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4413      	add	r3, r2
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d176      	bne.n	8000d58 <generateFSK2D+0x1b0>
    {
		for (int cnt = 0; cnt < samples_per_bit; cnt++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8000c6e:	e06b      	b.n	8000d48 <generateFSK2D+0x1a0>
		{
		  f_mux = fhss_0[ tally_0 % fhss_num ] - (FACTOR*100*cnt/samples_per_bit - FACTOR*100/2);
 8000c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c74:	fb93 f2f2 	sdiv	r2, r3, r2
 8000c78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000c7a:	fb01 f202 	mul.w	r2, r1, r2
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000c86:	4413      	add	r3, r2
 8000c88:	3b30      	subs	r3, #48	; 0x30
 8000c8a:	ed93 7a00 	vldr	s14, [r3]
 8000c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c90:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000c94:	fb02 f203 	mul.w	r2, r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c9e:	3bc8      	subs	r3, #200	; 0xc8
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cac:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		  //f_mux = fhss_0[ 0 ] - FACTOR*50*cnt/samples_per_bit;
		  out_fsk_modu[index + cnt] =  (uint32_t)( ( 1.1 + sin( (float)(2 * PI * f_mux * cnt) / fs ) )*(4096/4) );
 8000cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cb2:	f7ff fbed 	bl	8000490 <__aeabi_f2d>
 8000cb6:	a36a      	add	r3, pc, #424	; (adr r3, 8000e60 <generateFSK2D+0x2b8>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f7ff fc40 	bl	8000540 <__aeabi_dmul>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	4625      	mov	r5, r4
 8000cc6:	461c      	mov	r4, r3
 8000cc8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000cca:	f7ff fbcf 	bl	800046c <__aeabi_i2d>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	f7ff fc33 	bl	8000540 <__aeabi_dmul>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460c      	mov	r4, r1
 8000cde:	4618      	mov	r0, r3
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	f7ff ff0f 	bl	8000b04 <__aeabi_d2f>
 8000ce6:	ee06 0a90 	vmov	s13, r0
 8000cea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000cf2:	ee17 0a10 	vmov	r0, s14
 8000cf6:	f7ff fbcb 	bl	8000490 <__aeabi_f2d>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460c      	mov	r4, r1
 8000cfe:	ec44 3b10 	vmov	d0, r3, r4
 8000d02:	f002 feb5 	bl	8003a70 <sin>
 8000d06:	ec51 0b10 	vmov	r0, r1, d0
 8000d0a:	a357      	add	r3, pc, #348	; (adr r3, 8000e68 <generateFSK2D+0x2c0>)
 8000d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d10:	f7ff fa60 	bl	80001d4 <__adddf3>
 8000d14:	4603      	mov	r3, r0
 8000d16:	460c      	mov	r4, r1
 8000d18:	4618      	mov	r0, r3
 8000d1a:	4621      	mov	r1, r4
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	4b54      	ldr	r3, [pc, #336]	; (8000e74 <generateFSK2D+0x2cc>)
 8000d22:	f7ff fc0d 	bl	8000540 <__aeabi_dmul>
 8000d26:	4603      	mov	r3, r0
 8000d28:	460c      	mov	r4, r1
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	18d4      	adds	r4, r2, r3
 8000d3a:	f7ff fec3 	bl	8000ac4 <__aeabi_d2uiz>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6023      	str	r3, [r4, #0]
		for (int cnt = 0; cnt < samples_per_bit; cnt++)
 8000d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d44:	3301      	adds	r3, #1
 8000d46:	647b      	str	r3, [r7, #68]	; 0x44
 8000d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	db8f      	blt.n	8000c70 <generateFSK2D+0xc8>
		}
		tally_0++;
 8000d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d52:	3301      	adds	r3, #1
 8000d54:	657b      	str	r3, [r7, #84]	; 0x54
 8000d56:	e075      	b.n	8000e44 <generateFSK2D+0x29c>
    }
    else
    {
    	for (int cnt = 0; cnt < samples_per_bit; cnt++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8000d5c:	e06b      	b.n	8000e36 <generateFSK2D+0x28e>
    	{
    		f_mux = fhss_1[ tally_1 % fhss_num ] + (FACTOR*100*cnt/samples_per_bit - FACTOR*100/2);
 8000d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d62:	fb93 f2f2 	sdiv	r2, r3, r2
 8000d66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000d68:	fb01 f202 	mul.w	r2, r1, r2
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000d74:	4413      	add	r3, r2
 8000d76:	3b38      	subs	r3, #56	; 0x38
 8000d78:	ed93 7a00 	vldr	s14, [r3]
 8000d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000d82:	fb02 f203 	mul.w	r2, r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d8c:	3bc8      	subs	r3, #200	; 0xc8
 8000d8e:	ee07 3a90 	vmov	s15, r3
 8000d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d9a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    		//f_mux = fhss_1[ 0 ] + FACTOR*50*cnt/samples_per_bit;
    		out_fsk_modu[index + cnt] =  (uint32_t)( ( 1.1 + sin( (float)(2 * PI * f_mux * cnt) / fs ) )*(4096/4) );
 8000d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000da0:	f7ff fb76 	bl	8000490 <__aeabi_f2d>
 8000da4:	a32e      	add	r3, pc, #184	; (adr r3, 8000e60 <generateFSK2D+0x2b8>)
 8000da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000daa:	f7ff fbc9 	bl	8000540 <__aeabi_dmul>
 8000dae:	4603      	mov	r3, r0
 8000db0:	460c      	mov	r4, r1
 8000db2:	4625      	mov	r5, r4
 8000db4:	461c      	mov	r4, r3
 8000db6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000db8:	f7ff fb58 	bl	800046c <__aeabi_i2d>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	f7ff fbbc 	bl	8000540 <__aeabi_dmul>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	460c      	mov	r4, r1
 8000dcc:	4618      	mov	r0, r3
 8000dce:	4621      	mov	r1, r4
 8000dd0:	f7ff fe98 	bl	8000b04 <__aeabi_d2f>
 8000dd4:	ee06 0a90 	vmov	s13, r0
 8000dd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000de0:	ee17 0a10 	vmov	r0, s14
 8000de4:	f7ff fb54 	bl	8000490 <__aeabi_f2d>
 8000de8:	4603      	mov	r3, r0
 8000dea:	460c      	mov	r4, r1
 8000dec:	ec44 3b10 	vmov	d0, r3, r4
 8000df0:	f002 fe3e 	bl	8003a70 <sin>
 8000df4:	ec51 0b10 	vmov	r0, r1, d0
 8000df8:	a31b      	add	r3, pc, #108	; (adr r3, 8000e68 <generateFSK2D+0x2c0>)
 8000dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfe:	f7ff f9e9 	bl	80001d4 <__adddf3>
 8000e02:	4603      	mov	r3, r0
 8000e04:	460c      	mov	r4, r1
 8000e06:	4618      	mov	r0, r3
 8000e08:	4621      	mov	r1, r4
 8000e0a:	f04f 0200 	mov.w	r2, #0
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <generateFSK2D+0x2cc>)
 8000e10:	f7ff fb96 	bl	8000540 <__aeabi_dmul>
 8000e14:	4603      	mov	r3, r0
 8000e16:	460c      	mov	r4, r1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	4621      	mov	r1, r4
 8000e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e20:	4413      	add	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	18d4      	adds	r4, r2, r3
 8000e28:	f7ff fe4c 	bl	8000ac4 <__aeabi_d2uiz>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	6023      	str	r3, [r4, #0]
    	for (int cnt = 0; cnt < samples_per_bit; cnt++)
 8000e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e32:	3301      	adds	r3, #1
 8000e34:	643b      	str	r3, [r7, #64]	; 0x40
 8000e36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	db8f      	blt.n	8000d5e <generateFSK2D+0x1b6>
    	}
    	tally_1++;
 8000e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e40:	3301      	adds	r3, #1
 8000e42:	653b      	str	r3, [r7, #80]	; 0x50
  for (int i = 0; i < num_bits; i++)
 8000e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e46:	3301      	adds	r3, #1
 8000e48:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	f6ff aeff 	blt.w	8000c52 <generateFSK2D+0xaa>
    }
  }

}
 8000e54:	bf00      	nop
 8000e56:	3758      	adds	r7, #88	; 0x58
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e5c:	f3af 8000 	nop.w
 8000e60:	fc8b007a 	.word	0xfc8b007a
 8000e64:	401921fa 	.word	0x401921fa
 8000e68:	9999999a 	.word	0x9999999a
 8000e6c:	3ff19999 	.word	0x3ff19999
 8000e70:	44480000 	.word	0x44480000
 8000e74:	40900000 	.word	0x40900000

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	f5ad 5d26 	sub.w	sp, sp, #10624	; 0x2980
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f000 fa7b 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f843 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f000 f919 	bl	80010c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e8e:	f000 f8f9 	bl	8001084 <MX_DMA_Init>
  MX_DAC1_Init();
 8000e92:	f000 f87f 	bl	8000f94 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000e96:	f000 f8a7 	bl	8000fe8 <MX_TIM2_Init>
  //int bit_seq[BIT_NUM] = {1,0};
  //int bit_seq[BIT_NUM] = {1,0,1,0,1,0};
  //int bit_seq[BIT_NUM] = {1,0,1,0,1,0,1,0,1,0,1,0};
  //int bit_seq[BIT_NUM] = {1,1,0,1,0,0,1,1,1,1,0,0};
  //int bit_seq[BIT_NUM] = {1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0};
  int bit_seq[BIT_NUM] = {0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1,};
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <main+0x80>)
 8000e9c:	f507 5425 	add.w	r4, r7, #10560	; 0x2940
 8000ea0:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t mf_msg[BIT_NUM*BIT_LEN];

  generateFSK2D(mf_msg, bit_seq, BIT_NUM, FS, BIT_LEN, 1600*FACTOR, 2200*FACTOR);
 8000eb6:	f507 5125 	add.w	r1, r7, #10560	; 0x2940
 8000eba:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8000ebe:	f107 0020 	add.w	r0, r7, #32
 8000ec2:	3820      	subs	r0, #32
 8000ec4:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8000efc <main+0x84>
 8000ec8:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8000f00 <main+0x88>
 8000ecc:	23dd      	movs	r3, #221	; 0xdd
 8000ece:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8000f04 <main+0x8c>
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	f7ff fe68 	bl	8000ba8 <generateFSK2D>

  //get_sine_val();

  HAL_TIM_Base_Start(&htim2);
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <main+0x90>)
 8000eda:	f002 f9cb 	bl	8003274 <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac1 , DAC_CHANNEL_1, mf_msg, BIT_NUM*BIT_LEN, DAC_ALIGN_12B_R);
 8000ede:	f107 0220 	add.w	r2, r7, #32
 8000ee2:	3a20      	subs	r2, #32
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	f640 235c 	movw	r3, #2652	; 0xa5c
 8000eec:	2100      	movs	r1, #0
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <main+0x94>)
 8000ef0:	f000 fbfc 	bl	80016ec <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac1 , DAC_CHANNEL_1, sine_val, Ns, DAC_ALIGN_12B_R);

  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <main+0x7c>
 8000ef6:	bf00      	nop
 8000ef8:	08004ab0 	.word	0x08004ab0
 8000efc:	46098000 	.word	0x46098000
 8000f00:	45c80000 	.word	0x45c80000
 8000f04:	472c4400 	.word	0x472c4400
 8000f08:	20000210 	.word	0x20000210
 8000f0c:	20000028 	.word	0x20000028

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b090      	sub	sp, #64	; 0x40
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	2228      	movs	r2, #40	; 0x28
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fd9e 	bl	8003a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f36:	2301      	movs	r3, #1
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f42:	2300      	movs	r3, #0
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f46:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 f875 	bl	8002040 <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f5c:	f000 f8c8 	bl	80010f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2302      	movs	r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 ff68 	bl	8002e50 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f86:	f000 f8b3 	bl	80010f0 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3740      	adds	r7, #64	; 0x40
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_DAC1_Init+0x4c>)
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <MX_DAC1_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_DAC1_Init+0x4c>)
 8000fac:	f000 fb5d 	bl	800166a <HAL_DAC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000fb6:	f000 f89b 	bl	80010f0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000fba:	2324      	movs	r3, #36	; 0x24
 8000fbc:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_DAC1_Init+0x4c>)
 8000fca:	f000 fc3d 	bl	8001848 <HAL_DAC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000fd4:	f000 f88c 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000028 	.word	0x20000028
 8000fe4:	40007400 	.word	0x40007400

08000fe8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_TIM2_Init+0x98>)
 8001008:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM2_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM2_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1451*FACTOR; //1451*FACTOR
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM2_Init+0x98>)
 800101c:	f241 62ac 	movw	r2, #5804	; 0x16ac
 8001020:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_TIM2_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_TIM2_Init+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800102e:	4814      	ldr	r0, [pc, #80]	; (8001080 <MX_TIM2_Init+0x98>)
 8001030:	f002 f8f4 	bl	800321c <HAL_TIM_Base_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800103a:	f000 f859 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM2_Init+0x98>)
 800104c:	f002 fa5b 	bl	8003506 <HAL_TIM_ConfigClockSource>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001056:	f000 f84b 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800105a:	2320      	movs	r3, #32
 800105c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM2_Init+0x98>)
 8001068:	f002 fc4a 	bl	8003900 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001072:	f000 f83d 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000210 	.word	0x20000210

08001084 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_DMA_Init+0x38>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <MX_DMA_Init+0x38>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_DMA_Init+0x38>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	200d      	movs	r0, #13
 80010a8:	f000 faa9 	bl	80015fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010ac:	200d      	movs	r0, #13
 80010ae:	f000 fac2 	bl	8001636 <HAL_NVIC_EnableIRQ>

}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_GPIO_Init+0x2c>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <MX_GPIO_Init+0x2c>)
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_GPIO_Init+0x2c>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_MspInit+0x44>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_MspInit+0x44>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6193      	str	r3, [r2, #24]
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_MspInit+0x44>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_MspInit+0x44>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_MspInit+0x44>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_MspInit+0x44>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001136:	2007      	movs	r0, #7
 8001138:	f000 fa56 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a2d      	ldr	r2, [pc, #180]	; (800121c <HAL_DAC_MspInit+0xd4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d153      	bne.n	8001212 <HAL_DAC_MspInit+0xca>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_DAC_MspInit+0xd8>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <HAL_DAC_MspInit+0xd8>)
 8001170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <HAL_DAC_MspInit+0xd8>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <HAL_DAC_MspInit+0xd8>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a26      	ldr	r2, [pc, #152]	; (8001220 <HAL_DAC_MspInit+0xd8>)
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_DAC_MspInit+0xd8>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800119a:	2310      	movs	r3, #16
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119e:	2303      	movs	r3, #3
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f000 fdd4 	bl	8001d5c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_DAC_MspInit+0xdc>)
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <HAL_DAC_MspInit+0xe0>)
 80011b8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <HAL_DAC_MspInit+0xdc>)
 80011bc:	2210      	movs	r2, #16
 80011be:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_DAC_MspInit+0xdc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_DAC_MspInit+0xdc>)
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_DAC_MspInit+0xdc>)
 80011ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_DAC_MspInit+0xdc>)
 80011d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011da:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_DAC_MspInit+0xdc>)
 80011de:	2220      	movs	r2, #32
 80011e0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_DAC_MspInit+0xdc>)
 80011e4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80011e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80011ea:	480e      	ldr	r0, [pc, #56]	; (8001224 <HAL_DAC_MspInit+0xdc>)
 80011ec:	f000 fc1e 	bl	8001a2c <HAL_DMA_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80011f6:	f7ff ff7b 	bl	80010f0 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_DAC_MspInit+0xe4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <HAL_DAC_MspInit+0xe4>)
 8001200:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001204:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_DAC_MspInit+0xdc>)
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <HAL_DAC_MspInit+0xdc>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40007400 	.word	0x40007400
 8001220:	40021000 	.word	0x40021000
 8001224:	200001cc 	.word	0x200001cc
 8001228:	40020030 	.word	0x40020030
 800122c:	40010000 	.word	0x40010000

08001230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001240:	d113      	bne.n	800126a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_TIM_Base_MspInit+0x44>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_TIM_Base_MspInit+0x44>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_TIM_Base_MspInit+0x44>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	201c      	movs	r0, #28
 8001260:	f000 f9cd 	bl	80015fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001264:	201c      	movs	r0, #28
 8001266:	f000 f9e6 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler+0x4>

08001292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <UsageFault_Handler+0x4>

0800129e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012cc:	f000 f89c 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <DMA1_Channel3_IRQHandler+0x10>)
 80012da:	f000 fc4d 	bl	8001b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001cc 	.word	0x200001cc

080012e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM2_IRQHandler+0x10>)
 80012ee:	f001 ffeb 	bl	80032c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000210 	.word	0x20000210

080012fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <SystemInit+0x28>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <SystemInit+0x28>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <SystemInit+0x28>)
 8001312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001316:	609a      	str	r2, [r3, #8]
#endif
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800132c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800132e:	e003      	b.n	8001338 <LoopCopyDataInit>

08001330 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001332:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001334:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001336:	3104      	adds	r1, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <LoopForever+0xa>)
	ldr	r3, =_edata
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <LoopForever+0xe>)
	adds	r2, r0, r1
 800133c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800133e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001340:	d3f6      	bcc.n	8001330 <CopyDataInit>
	ldr	r2, =_sbss
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001344:	e002      	b.n	800134c <LoopFillZerobss>

08001346 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001346:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001348:	f842 3b04 	str.w	r3, [r2], #4

0800134c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <LoopForever+0x16>)
	cmp	r2, r3
 800134e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001350:	d3f9      	bcc.n	8001346 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001352:	f7ff ffd3 	bl	80012fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001356:	f002 fb5f 	bl	8003a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800135a:	f7ff fd8d 	bl	8000e78 <main>

0800135e <LoopForever>:

LoopForever:
    b LoopForever
 800135e:	e7fe      	b.n	800135e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001360:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001364:	08004cf0 	.word	0x08004cf0
	ldr	r0, =_sdata
 8001368:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800136c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001370:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001374:	20000254 	.word	0x20000254

08001378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_2_IRQHandler>
	...

0800137c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_Init+0x28>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_Init+0x28>)
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f92b 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f808 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff feb2 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40022000 	.word	0x40022000

080013a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f943 	bl	8001652 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 f90b 	bl	80015fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000008 	.word	0x20000008
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008
 800142c:	20000250 	.word	0x20000250

08001430 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;  
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000250 	.word	0x20000250

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db0b      	blt.n	80014d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	4907      	ldr	r1, [pc, #28]	; (80014e4 <__NVIC_EnableIRQ+0x38>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	; (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	; (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff8e 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff29 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff3e 	bl	8001490 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff8e 	bl	800153c <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5d 	bl	80014e8 <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff31 	bl	80014ac <__NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffa2 	bl	80015a4 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e014      	b.n	80016a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	791b      	ldrb	r3, [r3, #4]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d105      	bne.n	8001692 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fd5b 	bl	8001148 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2202      	movs	r2, #2
 8001696:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	795b      	ldrb	r3, [r3, #5]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_DAC_Start_DMA+0x1e>
 8001706:	2302      	movs	r3, #2
 8001708:	e08e      	b.n	8001828 <HAL_DAC_Start_DMA+0x13c>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2201      	movs	r2, #1
 800170e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2202      	movs	r2, #2
 8001714:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d12a      	bne.n	8001772 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a43      	ldr	r2, [pc, #268]	; (8001830 <HAL_DAC_Start_DMA+0x144>)
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a42      	ldr	r2, [pc, #264]	; (8001834 <HAL_DAC_Start_DMA+0x148>)
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a41      	ldr	r2, [pc, #260]	; (8001838 <HAL_DAC_Start_DMA+0x14c>)
 8001732:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001742:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d009      	beq.n	800175e <HAL_DAC_Start_DMA+0x72>
 800174a:	2b08      	cmp	r3, #8
 800174c:	d00c      	beq.n	8001768 <HAL_DAC_Start_DMA+0x7c>
 800174e:	2b00      	cmp	r3, #0
 8001750:	d000      	beq.n	8001754 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001752:	e039      	b.n	80017c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3308      	adds	r3, #8
 800175a:	617b      	str	r3, [r7, #20]
        break;
 800175c:	e034      	b.n	80017c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	330c      	adds	r3, #12
 8001764:	617b      	str	r3, [r7, #20]
        break;
 8001766:	e02f      	b.n	80017c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3310      	adds	r3, #16
 800176e:	617b      	str	r3, [r7, #20]
        break;
 8001770:	e02a      	b.n	80017c8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4a31      	ldr	r2, [pc, #196]	; (800183c <HAL_DAC_Start_DMA+0x150>)
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	4a30      	ldr	r2, [pc, #192]	; (8001840 <HAL_DAC_Start_DMA+0x154>)
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	4a2f      	ldr	r2, [pc, #188]	; (8001844 <HAL_DAC_Start_DMA+0x158>)
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001798:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	2b04      	cmp	r3, #4
 800179e:	d009      	beq.n	80017b4 <HAL_DAC_Start_DMA+0xc8>
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d00c      	beq.n	80017be <HAL_DAC_Start_DMA+0xd2>
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d000      	beq.n	80017aa <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80017a8:	e00e      	b.n	80017c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3314      	adds	r3, #20
 80017b0:	617b      	str	r3, [r7, #20]
        break;
 80017b2:	e009      	b.n	80017c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3318      	adds	r3, #24
 80017ba:	617b      	str	r3, [r7, #20]
        break;
 80017bc:	e004      	b.n	80017c8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	331c      	adds	r3, #28
 80017c4:	617b      	str	r3, [r7, #20]
        break;
 80017c6:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10f      	bne.n	80017ee <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6898      	ldr	r0, [r3, #8]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	f000 f967 	bl	8001aba <HAL_DMA_Start_IT>
 80017ec:	e00e      	b.n	800180c <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017fc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	68d8      	ldr	r0, [r3, #12]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	f000 f957 	bl	8001aba <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6819      	ldr	r1, [r3, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	409a      	lsls	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	08001955 	.word	0x08001955
 8001834:	08001977 	.word	0x08001977
 8001838:	08001993 	.word	0x08001993
 800183c:	080019c1 	.word	0x080019c1
 8001840:	080019e3 	.word	0x080019e3
 8001844:	080019ff 	.word	0x080019ff

08001848 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	795b      	ldrb	r3, [r3, #5]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_DAC_ConfigChannel+0x20>
 8001864:	2302      	movs	r3, #2
 8001866:	e04e      	b.n	8001906 <HAL_DAC_ConfigChannel+0xbe>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2202      	movs	r2, #2
 8001872:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a24      	ldr	r2, [pc, #144]	; (8001914 <HAL_DAC_ConfigChannel+0xcc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d112      	bne.n	80018ac <HAL_DAC_ConfigChannel+0x64>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10f      	bne.n	80018ac <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800188c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	4013      	ands	r3, r2
 800189c:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	e00e      	b.n	80018ca <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 80018ac:	f640 72fe 	movw	r2, #4094	; 0xffe
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	4013      	ands	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	22c0      	movs	r2, #192	; 0xc0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	400a      	ands	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2201      	movs	r2, #1
 80018fc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40007400 	.word	0x40007400

08001918 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7ff fea3 	bl	80016ae <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	711a      	strb	r2, [r3, #4]
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff fe9c 	bl	80016c2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	f043 0204 	orr.w	r2, r3, #4
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff fe92 	bl	80016d6 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	711a      	strb	r2, [r3, #4]
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7ff ffa2 	bl	8001918 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2201      	movs	r2, #1
 80019d8:	711a      	strb	r2, [r3, #4]
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f7ff ff9b 	bl	800192c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	f043 0204 	orr.w	r2, r3, #4
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff ff91 	bl	8001940 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	711a      	strb	r2, [r3, #4]
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e037      	b.n	8001ab2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2202      	movs	r2, #2
 8001a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a58:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a5c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f941 	bl	8001d1c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}  
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_DMA_Start_IT+0x20>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e04a      	b.n	8001b70 <HAL_DMA_Start_IT+0xb6>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d13a      	bne.n	8001b62 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0201 	bic.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 f8d4 	bl	8001cbe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 020e 	orr.w	r2, r2, #14
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e00f      	b.n	8001b50 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 020a 	orr.w	r2, r2, #10
 8001b3e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0204 	bic.w	r2, r2, #4
 8001b4e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e005      	b.n	8001b6e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	2204      	movs	r2, #4
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d024      	beq.n	8001bea <HAL_DMA_IRQHandler+0x72>
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01f      	beq.n	8001bea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0204 	bic.w	r2, r2, #4
 8001bc6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d06a      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001be8:	e065      	b.n	8001cb6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	2202      	movs	r2, #2
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d02c      	beq.n	8001c54 <HAL_DMA_IRQHandler+0xdc>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d027      	beq.n	8001c54 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10b      	bne.n	8001c2a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 020a 	bic.w	r2, r2, #10
 8001c20:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c32:	2102      	movs	r1, #2
 8001c34:	fa01 f202 	lsl.w	r2, r1, r2
 8001c38:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d035      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001c52:	e030      	b.n	8001cb6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2208      	movs	r2, #8
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d028      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x13e>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d023      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 020e 	bic.w	r2, r2, #14
 8001c7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
    }
  }
}  
 8001cb4:	e7ff      	b.n	8001cb6 <HAL_DMA_IRQHandler+0x13e>
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d108      	bne.n	8001cfe <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cfc:	e007      	b.n	8001d0e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	60da      	str	r2, [r3, #12]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <DMA_CalcBaseAndBitshift+0x34>)
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <DMA_CalcBaseAndBitshift+0x38>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	009a      	lsls	r2, r3, #2
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <DMA_CalcBaseAndBitshift+0x3c>)
 8001d40:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	bffdfff8 	.word	0xbffdfff8
 8001d54:	cccccccd 	.word	0xcccccccd
 8001d58:	40020000 	.word	0x40020000

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6a:	e14e      	b.n	800200a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8140 	beq.w	8002004 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d00b      	beq.n	8001da4 <HAL_GPIO_Init+0x48>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d98:	2b11      	cmp	r3, #17
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b12      	cmp	r3, #18
 8001da2:	d130      	bne.n	8001e06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dda:	2201      	movs	r2, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	f003 0201 	and.w	r2, r3, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0xea>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d123      	bne.n	8001e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	6939      	ldr	r1, [r7, #16]
 8001e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0203 	and.w	r2, r3, #3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 809a 	beq.w	8002004 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed0:	4b55      	ldr	r3, [pc, #340]	; (8002028 <HAL_GPIO_Init+0x2cc>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a54      	ldr	r2, [pc, #336]	; (8002028 <HAL_GPIO_Init+0x2cc>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b52      	ldr	r3, [pc, #328]	; (8002028 <HAL_GPIO_Init+0x2cc>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee8:	4a50      	ldr	r2, [pc, #320]	; (800202c <HAL_GPIO_Init+0x2d0>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	220f      	movs	r2, #15
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f12:	d013      	beq.n	8001f3c <HAL_GPIO_Init+0x1e0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a46      	ldr	r2, [pc, #280]	; (8002030 <HAL_GPIO_Init+0x2d4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00d      	beq.n	8001f38 <HAL_GPIO_Init+0x1dc>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a45      	ldr	r2, [pc, #276]	; (8002034 <HAL_GPIO_Init+0x2d8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <HAL_GPIO_Init+0x1d8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a44      	ldr	r2, [pc, #272]	; (8002038 <HAL_GPIO_Init+0x2dc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_GPIO_Init+0x1d4>
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e006      	b.n	8001f3e <HAL_GPIO_Init+0x1e2>
 8001f30:	2305      	movs	r3, #5
 8001f32:	e004      	b.n	8001f3e <HAL_GPIO_Init+0x1e2>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e002      	b.n	8001f3e <HAL_GPIO_Init+0x1e2>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_GPIO_Init+0x1e2>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	f002 0203 	and.w	r2, r2, #3
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	4093      	lsls	r3, r2
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f4e:	4937      	ldr	r1, [pc, #220]	; (800202c <HAL_GPIO_Init+0x2d0>)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f5c:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_GPIO_Init+0x2e0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f80:	4a2e      	ldr	r2, [pc, #184]	; (800203c <HAL_GPIO_Init+0x2e0>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f86:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_GPIO_Init+0x2e0>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001faa:	4a24      	ldr	r2, [pc, #144]	; (800203c <HAL_GPIO_Init+0x2e0>)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_GPIO_Init+0x2e0>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fd4:	4a19      	ldr	r2, [pc, #100]	; (800203c <HAL_GPIO_Init+0x2e0>)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_GPIO_Init+0x2e0>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_GPIO_Init+0x2e0>)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3301      	adds	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	f47f aea9 	bne.w	8001d6c <HAL_GPIO_Init+0x10>
  }
}
 800201a:	bf00      	nop
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000
 8002030:	48000400 	.word	0x48000400
 8002034:	48000800 	.word	0x48000800
 8002038:	48000c00 	.word	0x48000c00
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002046:	af00      	add	r7, sp, #0
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	f000 bef4 	b.w	8002e42 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 816a 	beq.w	800233e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800206a:	4bb3      	ldr	r3, [pc, #716]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b04      	cmp	r3, #4
 8002074:	d00c      	beq.n	8002090 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002076:	4bb0      	ldr	r3, [pc, #704]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d159      	bne.n	8002136 <HAL_RCC_OscConfig+0xf6>
 8002082:	4bad      	ldr	r3, [pc, #692]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208e:	d152      	bne.n	8002136 <HAL_RCC_OscConfig+0xf6>
 8002090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002094:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_OscConfig+0x82>
 80020bc:	4b9e      	ldr	r3, [pc, #632]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	e015      	b.n	80020ee <HAL_RCC_OscConfig+0xae>
 80020c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020da:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020de:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80020ea:	4b93      	ldr	r3, [pc, #588]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020f2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80020f6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020fa:	fa92 f2a2 	rbit	r2, r2
 80020fe:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002102:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002106:	fab2 f282 	clz	r2, r2
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f042 0220 	orr.w	r2, r2, #32
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f002 021f 	and.w	r2, r2, #31
 8002116:	2101      	movs	r1, #1
 8002118:	fa01 f202 	lsl.w	r2, r1, r2
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 810c 	beq.w	800233c <HAL_RCC_OscConfig+0x2fc>
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 8106 	bne.w	800233c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	f000 be86 	b.w	8002e42 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002140:	d106      	bne.n	8002150 <HAL_RCC_OscConfig+0x110>
 8002142:	4b7d      	ldr	r3, [pc, #500]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7c      	ldr	r2, [pc, #496]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e030      	b.n	80021b2 <HAL_RCC_OscConfig+0x172>
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x134>
 800215a:	4b77      	ldr	r3, [pc, #476]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a76      	ldr	r2, [pc, #472]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b74      	ldr	r3, [pc, #464]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a73      	ldr	r2, [pc, #460]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 800216c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01e      	b.n	80021b2 <HAL_RCC_OscConfig+0x172>
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800217e:	d10c      	bne.n	800219a <HAL_RCC_OscConfig+0x15a>
 8002180:	4b6d      	ldr	r3, [pc, #436]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6c      	ldr	r2, [pc, #432]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 8002186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a69      	ldr	r2, [pc, #420]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 8002192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	e00b      	b.n	80021b2 <HAL_RCC_OscConfig+0x172>
 800219a:	4b67      	ldr	r3, [pc, #412]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a66      	ldr	r2, [pc, #408]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b64      	ldr	r3, [pc, #400]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a63      	ldr	r2, [pc, #396]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021b2:	4b61      	ldr	r3, [pc, #388]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f023 020f 	bic.w	r2, r3, #15
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	495d      	ldr	r1, [pc, #372]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d059      	beq.n	8002284 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff f92e 	bl	8001430 <HAL_GetTick>
 80021d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021da:	f7ff f929 	bl	8001430 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d902      	bls.n	80021f0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	f000 be29 	b.w	8002e42 <HAL_RCC_OscConfig+0xe02>
 80021f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002204:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d102      	bne.n	8002222 <HAL_RCC_OscConfig+0x1e2>
 800221c:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	e015      	b.n	800224e <HAL_RCC_OscConfig+0x20e>
 8002222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002226:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002236:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800223a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800223e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800224a:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002252:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002256:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800225a:	fa92 f2a2 	rbit	r2, r2
 800225e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002262:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002266:	fab2 f282 	clz	r2, r2
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	f042 0220 	orr.w	r2, r2, #32
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f002 021f 	and.w	r2, r2, #31
 8002276:	2101      	movs	r1, #1
 8002278:	fa01 f202 	lsl.w	r2, r1, r2
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0ab      	beq.n	80021da <HAL_RCC_OscConfig+0x19a>
 8002282:	e05c      	b.n	800233e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff f8d4 	bl	8001430 <HAL_GetTick>
 8002288:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800228e:	f7ff f8cf 	bl	8001430 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d902      	bls.n	80022a4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	f000 bdcf 	b.w	8002e42 <HAL_RCC_OscConfig+0xe02>
 80022a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_RCC_OscConfig+0x296>
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0x2c2>
 80022d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022f2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_RCC_OscConfig+0x2f8>)
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002306:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800230a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800230e:	fa92 f2a2 	rbit	r2, r2
 8002312:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002316:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800231a:	fab2 f282 	clz	r2, r2
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	f042 0220 	orr.w	r2, r2, #32
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f002 021f 	and.w	r2, r2, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f202 	lsl.w	r2, r1, r2
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1ab      	bne.n	800228e <HAL_RCC_OscConfig+0x24e>
 8002336:	e002      	b.n	800233e <HAL_RCC_OscConfig+0x2fe>
 8002338:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 816f 	beq.w	800262c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800234e:	4bd0      	ldr	r3, [pc, #832]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800235a:	4bcd      	ldr	r3, [pc, #820]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b08      	cmp	r3, #8
 8002364:	d16c      	bne.n	8002440 <HAL_RCC_OscConfig+0x400>
 8002366:	4bca      	ldr	r3, [pc, #808]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d166      	bne.n	8002440 <HAL_RCC_OscConfig+0x400>
 8002372:	2302      	movs	r3, #2
 8002374:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002384:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d102      	bne.n	80023a2 <HAL_RCC_OscConfig+0x362>
 800239c:	4bbc      	ldr	r3, [pc, #752]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	e013      	b.n	80023ca <HAL_RCC_OscConfig+0x38a>
 80023a2:	2302      	movs	r3, #2
 80023a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023b4:	2302      	movs	r3, #2
 80023b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023c6:	4bb2      	ldr	r3, [pc, #712]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	2202      	movs	r2, #2
 80023cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80023d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023d4:	fa92 f2a2 	rbit	r2, r2
 80023d8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80023dc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80023e0:	fab2 f282 	clz	r2, r2
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f042 0220 	orr.w	r2, r2, #32
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f002 021f 	and.w	r2, r2, #31
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_RCC_OscConfig+0x3cc>
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d002      	beq.n	800240c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f000 bd1b 	b.w	8002e42 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240c:	4ba0      	ldr	r3, [pc, #640]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	21f8      	movs	r1, #248	; 0xf8
 800241c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002424:	fa91 f1a1 	rbit	r1, r1
 8002428:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800242c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002430:	fab1 f181 	clz	r1, r1
 8002434:	b2c9      	uxtb	r1, r1
 8002436:	408b      	lsls	r3, r1
 8002438:	4995      	ldr	r1, [pc, #596]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	e0f5      	b.n	800262c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8085 	beq.w	8002556 <HAL_RCC_OscConfig+0x516>
 800244c:	2301      	movs	r3, #1
 800244e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800245e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800246c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	461a      	mov	r2, r3
 8002474:	2301      	movs	r3, #1
 8002476:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7fe ffda 	bl	8001430 <HAL_GetTick>
 800247c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002482:	f7fe ffd5 	bl	8001430 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d902      	bls.n	8002498 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	f000 bcd5 	b.w	8002e42 <HAL_RCC_OscConfig+0xe02>
 8002498:	2302      	movs	r3, #2
 800249a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d102      	bne.n	80024c8 <HAL_RCC_OscConfig+0x488>
 80024c2:	4b73      	ldr	r3, [pc, #460]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	e013      	b.n	80024f0 <HAL_RCC_OscConfig+0x4b0>
 80024c8:	2302      	movs	r3, #2
 80024ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024da:	2302      	movs	r3, #2
 80024dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80024ec:	4b68      	ldr	r3, [pc, #416]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	2202      	movs	r2, #2
 80024f2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80024f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80024fa:	fa92 f2a2 	rbit	r2, r2
 80024fe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002502:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002506:	fab2 f282 	clz	r2, r2
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	f042 0220 	orr.w	r2, r2, #32
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f002 021f 	and.w	r2, r2, #31
 8002516:	2101      	movs	r1, #1
 8002518:	fa01 f202 	lsl.w	r2, r1, r2
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0af      	beq.n	8002482 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	21f8      	movs	r1, #248	; 0xf8
 8002532:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800253a:	fa91 f1a1 	rbit	r1, r1
 800253e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002542:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002546:	fab1 f181 	clz	r1, r1
 800254a:	b2c9      	uxtb	r1, r1
 800254c:	408b      	lsls	r3, r1
 800254e:	4950      	ldr	r1, [pc, #320]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
 8002554:	e06a      	b.n	800262c <HAL_RCC_OscConfig+0x5ec>
 8002556:	2301      	movs	r3, #1
 8002558:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002568:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002576:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	461a      	mov	r2, r3
 800257e:	2300      	movs	r3, #0
 8002580:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7fe ff55 	bl	8001430 <HAL_GetTick>
 8002586:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258c:	f7fe ff50 	bl	8001430 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d902      	bls.n	80025a2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	f000 bc50 	b.w	8002e42 <HAL_RCC_OscConfig+0xe02>
 80025a2:	2302      	movs	r3, #2
 80025a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80025b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d102      	bne.n	80025d2 <HAL_RCC_OscConfig+0x592>
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	e013      	b.n	80025fa <HAL_RCC_OscConfig+0x5ba>
 80025d2:	2302      	movs	r3, #2
 80025d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025e4:	2302      	movs	r3, #2
 80025e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80025ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_RCC_OscConfig+0x650>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	2202      	movs	r2, #2
 80025fc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002600:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002604:	fa92 f2a2 	rbit	r2, r2
 8002608:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800260c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f042 0220 	orr.w	r2, r2, #32
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f002 021f 	and.w	r2, r2, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f202 	lsl.w	r2, r1, r2
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1af      	bne.n	800258c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80da 	beq.w	80027f0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d069      	beq.n	800271a <HAL_RCC_OscConfig+0x6da>
 8002646:	2301      	movs	r3, #1
 8002648:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_OscConfig+0x654>)
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	461a      	mov	r2, r3
 800266c:	2301      	movs	r3, #1
 800266e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002670:	f7fe fede 	bl	8001430 <HAL_GetTick>
 8002674:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002678:	e00e      	b.n	8002698 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267a:	f7fe fed9 	bl	8001430 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d906      	bls.n	8002698 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e3d9      	b.n	8002e42 <HAL_RCC_OscConfig+0xe02>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	10908120 	.word	0x10908120
 8002698:	2302      	movs	r3, #2
 800269a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026ae:	2202      	movs	r2, #2
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	fa93 f2a3 	rbit	r2, r3
 80026bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80026c6:	2202      	movs	r2, #2
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	fa93 f2a3 	rbit	r2, r3
 80026d4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80026d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	4ba5      	ldr	r3, [pc, #660]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80026dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80026e2:	2102      	movs	r1, #2
 80026e4:	6019      	str	r1, [r3, #0]
 80026e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f1a3 	rbit	r1, r3
 80026f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026f4:	6019      	str	r1, [r3, #0]
  return result;
 80026f6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0b0      	beq.n	800267a <HAL_RCC_OscConfig+0x63a>
 8002718:	e06a      	b.n	80027f0 <HAL_RCC_OscConfig+0x7b0>
 800271a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002730:	601a      	str	r2, [r3, #0]
  return result;
 8002732:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002736:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	4b8c      	ldr	r3, [pc, #560]	; (8002974 <HAL_RCC_OscConfig+0x934>)
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	461a      	mov	r2, r3
 8002748:	2300      	movs	r3, #0
 800274a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7fe fe70 	bl	8001430 <HAL_GetTick>
 8002750:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	e009      	b.n	800276a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002756:	f7fe fe6b 	bl	8001430 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e36b      	b.n	8002e42 <HAL_RCC_OscConfig+0xe02>
 800276a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800276e:	2202      	movs	r2, #2
 8002770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	fa93 f2a3 	rbit	r2, r3
 800277c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002786:	2202      	movs	r2, #2
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	fa93 f2a3 	rbit	r2, r3
 8002794:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800279e:	2202      	movs	r2, #2
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	fa93 f2a3 	rbit	r2, r3
 80027ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b2:	4b6f      	ldr	r3, [pc, #444]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80027b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027ba:	2102      	movs	r1, #2
 80027bc:	6019      	str	r1, [r3, #0]
 80027be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	fa93 f1a3 	rbit	r1, r3
 80027c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027cc:	6019      	str	r1, [r3, #0]
  return result;
 80027ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1b2      	bne.n	8002756 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8158 	beq.w	8002ab0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4b5a      	ldr	r3, [pc, #360]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d112      	bne.n	8002838 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4a56      	ldr	r2, [pc, #344]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	61d3      	str	r3, [r2, #28]
 800281e:	4b54      	ldr	r3, [pc, #336]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	f107 0308 	add.w	r3, r7, #8
 8002830:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002832:	2301      	movs	r3, #1
 8002834:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <HAL_RCC_OscConfig+0x938>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d11a      	bne.n	800287a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <HAL_RCC_OscConfig+0x938>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a4b      	ldr	r2, [pc, #300]	; (8002978 <HAL_RCC_OscConfig+0x938>)
 800284a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002850:	f7fe fdee 	bl	8001430 <HAL_GetTick>
 8002854:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	e009      	b.n	800286e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7fe fde9 	bl	8001430 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e2e9      	b.n	8002e42 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	4b42      	ldr	r3, [pc, #264]	; (8002978 <HAL_RCC_OscConfig+0x938>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ef      	beq.n	800285a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x852>
 8002884:	4b3a      	ldr	r3, [pc, #232]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a39      	ldr	r2, [pc, #228]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	e02f      	b.n	80028f2 <HAL_RCC_OscConfig+0x8b2>
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x876>
 800289c:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4a33      	ldr	r2, [pc, #204]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6213      	str	r3, [r2, #32]
 80028a8:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4a30      	ldr	r2, [pc, #192]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	6213      	str	r3, [r2, #32]
 80028b4:	e01d      	b.n	80028f2 <HAL_RCC_OscConfig+0x8b2>
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x89a>
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	6213      	str	r3, [r2, #32]
 80028cc:	4b28      	ldr	r3, [pc, #160]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	e00b      	b.n	80028f2 <HAL_RCC_OscConfig+0x8b2>
 80028da:	4b25      	ldr	r3, [pc, #148]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a24      	ldr	r2, [pc, #144]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	4b22      	ldr	r3, [pc, #136]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a21      	ldr	r2, [pc, #132]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d06b      	beq.n	80029d4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fe fd98 	bl	8001430 <HAL_GetTick>
 8002900:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	e00b      	b.n	800291e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fe fd93 	bl	8001430 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e291      	b.n	8002e42 <HAL_RCC_OscConfig+0xe02>
 800291e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002922:	2202      	movs	r2, #2
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800293a:	2202      	movs	r2, #2
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	fa93 f2a3 	rbit	r2, r3
 8002948:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800294c:	601a      	str	r2, [r3, #0]
  return result;
 800294e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002952:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f043 0302 	orr.w	r3, r3, #2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d109      	bne.n	800297c <HAL_RCC_OscConfig+0x93c>
 8002968:	4b01      	ldr	r3, [pc, #4]	; (8002970 <HAL_RCC_OscConfig+0x930>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	e014      	b.n	8002998 <HAL_RCC_OscConfig+0x958>
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	10908120 	.word	0x10908120
 8002978:	40007000 	.word	0x40007000
 800297c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002980:	2202      	movs	r2, #2
 8002982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	4bbb      	ldr	r3, [pc, #748]	; (8002c84 <HAL_RCC_OscConfig+0xc44>)
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800299c:	2102      	movs	r1, #2
 800299e:	6011      	str	r1, [r2, #0]
 80029a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	fa92 f1a2 	rbit	r1, r2
 80029aa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80029ae:	6011      	str	r1, [r2, #0]
  return result;
 80029b0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	fab2 f282 	clz	r2, r2
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	f002 021f 	and.w	r2, r2, #31
 80029c6:	2101      	movs	r1, #1
 80029c8:	fa01 f202 	lsl.w	r2, r1, r2
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d099      	beq.n	8002906 <HAL_RCC_OscConfig+0x8c6>
 80029d2:	e063      	b.n	8002a9c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7fe fd2c 	bl	8001430 <HAL_GetTick>
 80029d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029dc:	e00b      	b.n	80029f6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fe fd27 	bl	8001430 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e225      	b.n	8002e42 <HAL_RCC_OscConfig+0xe02>
 80029f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80029fa:	2202      	movs	r2, #2
 80029fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a12:	2202      	movs	r2, #2
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a24:	601a      	str	r2, [r3, #0]
  return result;
 8002a26:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f043 0302 	orr.w	r3, r3, #2
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d102      	bne.n	8002a46 <HAL_RCC_OscConfig+0xa06>
 8002a40:	4b90      	ldr	r3, [pc, #576]	; (8002c84 <HAL_RCC_OscConfig+0xc44>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	e00d      	b.n	8002a62 <HAL_RCC_OscConfig+0xa22>
 8002a46:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f2a3 	rbit	r2, r3
 8002a58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	4b89      	ldr	r3, [pc, #548]	; (8002c84 <HAL_RCC_OscConfig+0xc44>)
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a66:	2102      	movs	r1, #2
 8002a68:	6011      	str	r1, [r2, #0]
 8002a6a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	fa92 f1a2 	rbit	r1, r2
 8002a74:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a78:	6011      	str	r1, [r2, #0]
  return result;
 8002a7a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f002 021f 	and.w	r2, r2, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1a0      	bne.n	80029de <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a9c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa4:	4b77      	ldr	r3, [pc, #476]	; (8002c84 <HAL_RCC_OscConfig+0xc44>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	4a76      	ldr	r2, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0xc44>)
 8002aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 81c2 	beq.w	8002e40 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002abc:	4b71      	ldr	r3, [pc, #452]	; (8002c84 <HAL_RCC_OscConfig+0xc44>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	f000 819c 	beq.w	8002e02 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	f040 8114 	bne.w	8002cfe <HAL_RCC_OscConfig+0xcbe>
 8002ad6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ada:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	fa93 f2a3 	rbit	r2, r3
 8002aea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002aee:	601a      	str	r2, [r3, #0]
  return result;
 8002af0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002af4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	461a      	mov	r2, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fc90 	bl	8001430 <HAL_GetTick>
 8002b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b14:	e009      	b.n	8002b2a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b16:	f7fe fc8b 	bl	8001430 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e18b      	b.n	8002e42 <HAL_RCC_OscConfig+0xe02>
 8002b2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b42:	601a      	str	r2, [r3, #0]
  return result;
 8002b44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d102      	bne.n	8002b64 <HAL_RCC_OscConfig+0xb24>
 8002b5e:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <HAL_RCC_OscConfig+0xc44>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	e01b      	b.n	8002b9c <HAL_RCC_OscConfig+0xb5c>
 8002b64:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	fa93 f2a3 	rbit	r2, r3
 8002b78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f2a3 	rbit	r2, r3
 8002b92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <HAL_RCC_OscConfig+0xc44>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ba0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ba4:	6011      	str	r1, [r2, #0]
 8002ba6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	fa92 f1a2 	rbit	r1, r2
 8002bb0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002bb4:	6011      	str	r1, [r2, #0]
  return result;
 8002bb6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	fab2 f282 	clz	r2, r2
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	f042 0220 	orr.w	r2, r2, #32
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	f002 021f 	and.w	r2, r2, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d19e      	bne.n	8002b16 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd8:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <HAL_RCC_OscConfig+0xc44>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	430b      	orrs	r3, r1
 8002bee:	4925      	ldr	r1, [pc, #148]	; (8002c84 <HAL_RCC_OscConfig+0xc44>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
 8002bf4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	fa93 f2a3 	rbit	r2, r3
 8002c08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c0c:	601a      	str	r2, [r3, #0]
  return result;
 8002c0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c12:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	461a      	mov	r2, r3
 8002c26:	2301      	movs	r3, #1
 8002c28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fc01 	bl	8001430 <HAL_GetTick>
 8002c2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c32:	e009      	b.n	8002c48 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fbfc 	bl	8001430 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e0fc      	b.n	8002e42 <HAL_RCC_OscConfig+0xe02>
 8002c48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c60:	601a      	str	r2, [r3, #0]
  return result;
 8002c62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d105      	bne.n	8002c88 <HAL_RCC_OscConfig+0xc48>
 8002c7c:	4b01      	ldr	r3, [pc, #4]	; (8002c84 <HAL_RCC_OscConfig+0xc44>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	e01e      	b.n	8002cc0 <HAL_RCC_OscConfig+0xc80>
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	fa93 f2a3 	rbit	r2, r3
 8002cb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	4b63      	ldr	r3, [pc, #396]	; (8002e4c <HAL_RCC_OscConfig+0xe0c>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002cc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cc8:	6011      	str	r1, [r2, #0]
 8002cca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	fa92 f1a2 	rbit	r1, r2
 8002cd4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002cd8:	6011      	str	r1, [r2, #0]
  return result;
 8002cda:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	fab2 f282 	clz	r2, r2
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	f042 0220 	orr.w	r2, r2, #32
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	f002 021f 	and.w	r2, r2, #31
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d09b      	beq.n	8002c34 <HAL_RCC_OscConfig+0xbf4>
 8002cfc:	e0a0      	b.n	8002e40 <HAL_RCC_OscConfig+0xe00>
 8002cfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	fa93 f2a3 	rbit	r2, r3
 8002d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d16:	601a      	str	r2, [r3, #0]
  return result;
 8002d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d1c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2300      	movs	r3, #0
 8002d32:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe fb7c 	bl	8001430 <HAL_GetTick>
 8002d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3c:	e009      	b.n	8002d52 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe fb77 	bl	8001430 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e077      	b.n	8002e42 <HAL_RCC_OscConfig+0xe02>
 8002d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6a:	601a      	str	r2, [r3, #0]
  return result;
 8002d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d102      	bne.n	8002d8c <HAL_RCC_OscConfig+0xd4c>
 8002d86:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <HAL_RCC_OscConfig+0xe0c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	e01b      	b.n	8002dc4 <HAL_RCC_OscConfig+0xd84>
 8002d8c:	f107 0320 	add.w	r3, r7, #32
 8002d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f107 0320 	add.w	r3, r7, #32
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fa93 f2a3 	rbit	r2, r3
 8002da0:	f107 031c 	add.w	r3, r7, #28
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f107 0318 	add.w	r3, r7, #24
 8002daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f107 0318 	add.w	r3, r7, #24
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f107 0314 	add.w	r3, r7, #20
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <HAL_RCC_OscConfig+0xe0c>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f107 0210 	add.w	r2, r7, #16
 8002dc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dcc:	6011      	str	r1, [r2, #0]
 8002dce:	f107 0210 	add.w	r2, r7, #16
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	fa92 f1a2 	rbit	r1, r2
 8002dd8:	f107 020c 	add.w	r2, r7, #12
 8002ddc:	6011      	str	r1, [r2, #0]
  return result;
 8002dde:	f107 020c 	add.w	r2, r7, #12
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	fab2 f282 	clz	r2, r2
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f042 0220 	orr.w	r2, r2, #32
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	f002 021f 	and.w	r2, r2, #31
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d19e      	bne.n	8002d3e <HAL_RCC_OscConfig+0xcfe>
 8002e00:	e01e      	b.n	8002e40 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e018      	b.n	8002e42 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e10:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_RCC_OscConfig+0xe0c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e18:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d108      	bne.n	8002e3c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000

08002e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b09e      	sub	sp, #120	; 0x78
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e162      	b.n	800312e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b90      	ldr	r3, [pc, #576]	; (80030ac <HAL_RCC_ClockConfig+0x25c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d910      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b8d      	ldr	r3, [pc, #564]	; (80030ac <HAL_RCC_ClockConfig+0x25c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 0207 	bic.w	r2, r3, #7
 8002e7e:	498b      	ldr	r1, [pc, #556]	; (80030ac <HAL_RCC_ClockConfig+0x25c>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b89      	ldr	r3, [pc, #548]	; (80030ac <HAL_RCC_ClockConfig+0x25c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e14a      	b.n	800312e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea4:	4b82      	ldr	r3, [pc, #520]	; (80030b0 <HAL_RCC_ClockConfig+0x260>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	497f      	ldr	r1, [pc, #508]	; (80030b0 <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80dc 	beq.w	800307c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d13c      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xf6>
 8002ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d102      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xa6>
 8002ef0:	4b6f      	ldr	r3, [pc, #444]	; (80030b0 <HAL_RCC_ClockConfig+0x260>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	e00f      	b.n	8002f16 <HAL_RCC_ClockConfig+0xc6>
 8002ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	667b      	str	r3, [r7, #100]	; 0x64
 8002f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f08:	663b      	str	r3, [r7, #96]	; 0x60
 8002f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f12:	4b67      	ldr	r3, [pc, #412]	; (80030b0 <HAL_RCC_ClockConfig+0x260>)
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f1e:	fa92 f2a2 	rbit	r2, r2
 8002f22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f26:	fab2 f282 	clz	r2, r2
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	f042 0220 	orr.w	r2, r2, #32
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f002 021f 	and.w	r2, r2, #31
 8002f36:	2101      	movs	r1, #1
 8002f38:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d17b      	bne.n	800303a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0f3      	b.n	800312e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d13c      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x178>
 8002f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d102      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x128>
 8002f72:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <HAL_RCC_ClockConfig+0x260>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	e00f      	b.n	8002f98 <HAL_RCC_ClockConfig+0x148>
 8002f78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	647b      	str	r3, [r7, #68]	; 0x44
 8002f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f94:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <HAL_RCC_ClockConfig+0x260>)
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa0:	fa92 f2a2 	rbit	r2, r2
 8002fa4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fa8:	fab2 f282 	clz	r2, r2
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	f042 0220 	orr.w	r2, r2, #32
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	f002 021f 	and.w	r2, r2, #31
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d13a      	bne.n	800303a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0b2      	b.n	800312e <HAL_RCC_ClockConfig+0x2de>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x1a0>
 8002fea:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_RCC_ClockConfig+0x260>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	e00d      	b.n	800300c <HAL_RCC_ClockConfig+0x1bc>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	623b      	str	r3, [r7, #32]
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCC_ClockConfig+0x260>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2202      	movs	r2, #2
 800300e:	61ba      	str	r2, [r7, #24]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	fa92 f2a2 	rbit	r2, r2
 8003016:	617a      	str	r2, [r7, #20]
  return result;
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	fab2 f282 	clz	r2, r2
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	f042 0220 	orr.w	r2, r2, #32
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	f002 021f 	and.w	r2, r2, #31
 800302a:	2101      	movs	r1, #1
 800302c:	fa01 f202 	lsl.w	r2, r1, r2
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e079      	b.n	800312e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303a:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_RCC_ClockConfig+0x260>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	491a      	ldr	r1, [pc, #104]	; (80030b0 <HAL_RCC_ClockConfig+0x260>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800304c:	f7fe f9f0 	bl	8001430 <HAL_GetTick>
 8003050:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	e00a      	b.n	800306a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003054:	f7fe f9ec 	bl	8001430 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e061      	b.n	800312e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_RCC_ClockConfig+0x260>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 020c 	and.w	r2, r3, #12
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d1eb      	bne.n	8003054 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_ClockConfig+0x25c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d214      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_RCC_ClockConfig+0x25c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	4906      	ldr	r1, [pc, #24]	; (80030ac <HAL_RCC_ClockConfig+0x25c>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b04      	ldr	r3, [pc, #16]	; (80030ac <HAL_RCC_ClockConfig+0x25c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e040      	b.n	800312e <HAL_RCC_ClockConfig+0x2de>
 80030ac:	40022000 	.word	0x40022000
 80030b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_RCC_ClockConfig+0x2e8>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	491a      	ldr	r1, [pc, #104]	; (8003138 <HAL_RCC_ClockConfig+0x2e8>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_RCC_ClockConfig+0x2e8>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4912      	ldr	r1, [pc, #72]	; (8003138 <HAL_RCC_ClockConfig+0x2e8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030f2:	f000 f829 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 80030f6:	4601      	mov	r1, r0
 80030f8:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <HAL_RCC_ClockConfig+0x2e8>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003100:	22f0      	movs	r2, #240	; 0xf0
 8003102:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	fa92 f2a2 	rbit	r2, r2
 800310a:	60fa      	str	r2, [r7, #12]
  return result;
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	fab2 f282 	clz	r2, r2
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	40d3      	lsrs	r3, r2
 8003116:	4a09      	ldr	r2, [pc, #36]	; (800313c <HAL_RCC_ClockConfig+0x2ec>)
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	fa21 f303 	lsr.w	r3, r1, r3
 800311e:	4a08      	ldr	r2, [pc, #32]	; (8003140 <HAL_RCC_ClockConfig+0x2f0>)
 8003120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_RCC_ClockConfig+0x2f4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe f93e 	bl	80013a8 <HAL_InitTick>
  
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3778      	adds	r7, #120	; 0x78
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	08004ae0 	.word	0x08004ae0
 8003140:	20000000 	.word	0x20000000
 8003144:	20000004 	.word	0x20000004

08003148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	b480      	push	{r7}
 800314a:	b08b      	sub	sp, #44	; 0x2c
 800314c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003162:	4b29      	ldr	r3, [pc, #164]	; (8003208 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b04      	cmp	r3, #4
 8003170:	d002      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x30>
 8003172:	2b08      	cmp	r3, #8
 8003174:	d003      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x36>
 8003176:	e03c      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003178:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_RCC_GetSysClockFreq+0xc4>)
 800317a:	623b      	str	r3, [r7, #32]
      break;
 800317c:	e03c      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003184:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003188:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	fa92 f2a2 	rbit	r2, r2
 8003190:	607a      	str	r2, [r7, #4]
  return result;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	fab2 f282 	clz	r2, r2
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	40d3      	lsrs	r3, r2
 800319c:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_RCC_GetSysClockFreq+0xc8>)
 800319e:	5cd3      	ldrb	r3, [r2, r3]
 80031a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	220f      	movs	r2, #15
 80031ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	fa92 f2a2 	rbit	r2, r2
 80031b4:	60fa      	str	r2, [r7, #12]
  return result;
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	fab2 f282 	clz	r2, r2
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	40d3      	lsrs	r3, r2
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <HAL_RCC_GetSysClockFreq+0xcc>)
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
 80031c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031d0:	4a0e      	ldr	r2, [pc, #56]	; (800320c <HAL_RCC_GetSysClockFreq+0xc4>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
 80031e0:	e004      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <HAL_RCC_GetSysClockFreq+0xd0>)
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	623b      	str	r3, [r7, #32]
      break;
 80031f0:	e002      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_GetSysClockFreq+0xc4>)
 80031f4:	623b      	str	r3, [r7, #32]
      break;
 80031f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f8:	6a3b      	ldr	r3, [r7, #32]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	372c      	adds	r7, #44	; 0x2c
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	007a1200 	.word	0x007a1200
 8003210:	08004af0 	.word	0x08004af0
 8003214:	08004b00 	.word	0x08004b00
 8003218:	003d0900 	.word	0x003d0900

0800321c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e01d      	b.n	800326a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd fff4 	bl	8001230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f000 fa3e 	bl	80036dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_TIM_Base_Start+0x50>)
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b06      	cmp	r3, #6
 8003294:	d00b      	beq.n	80032ae <HAL_TIM_Base_Start+0x3a>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329c:	d007      	beq.n	80032ae <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	00010007 	.word	0x00010007

080032c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d122      	bne.n	8003324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d11b      	bne.n	8003324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0202 	mvn.w	r2, #2
 80032f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f9c8 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f9ba 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f9cb 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b04      	cmp	r3, #4
 8003330:	d122      	bne.n	8003378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b04      	cmp	r3, #4
 800333e:	d11b      	bne.n	8003378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0204 	mvn.w	r2, #4
 8003348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f99e 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8003364:	e005      	b.n	8003372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f990 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f9a1 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b08      	cmp	r3, #8
 8003384:	d122      	bne.n	80033cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b08      	cmp	r3, #8
 8003392:	d11b      	bne.n	80033cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0208 	mvn.w	r2, #8
 800339c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2204      	movs	r2, #4
 80033a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f974 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 80033b8:	e005      	b.n	80033c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f966 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f977 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d122      	bne.n	8003420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d11b      	bne.n	8003420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0210 	mvn.w	r2, #16
 80033f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2208      	movs	r2, #8
 80033f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f94a 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f93c 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f94d 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d10e      	bne.n	800344c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d107      	bne.n	800344c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0201 	mvn.w	r2, #1
 8003444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f916 	bl	8003678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	2b80      	cmp	r3, #128	; 0x80
 8003458:	d10e      	bne.n	8003478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d107      	bne.n	8003478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fabc 	bl	80039f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003486:	d10e      	bne.n	80034a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d107      	bne.n	80034a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800349e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 faaf 	bl	8003a04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d10e      	bne.n	80034d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d107      	bne.n	80034d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f8fb 	bl	80036c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d10e      	bne.n	80034fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d107      	bne.n	80034fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f06f 0220 	mvn.w	r2, #32
 80034f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa6f 	bl	80039dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_TIM_ConfigClockSource+0x18>
 800351a:	2302      	movs	r3, #2
 800351c:	e0a8      	b.n	8003670 <HAL_TIM_ConfigClockSource+0x16a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003540:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003548:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	d067      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x124>
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d80b      	bhi.n	8003576 <HAL_TIM_ConfigClockSource+0x70>
 800355e:	2b10      	cmp	r3, #16
 8003560:	d073      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x144>
 8003562:	2b10      	cmp	r3, #16
 8003564:	d802      	bhi.n	800356c <HAL_TIM_ConfigClockSource+0x66>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d06f      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800356a:	e078      	b.n	800365e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800356c:	2b20      	cmp	r3, #32
 800356e:	d06c      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x144>
 8003570:	2b30      	cmp	r3, #48	; 0x30
 8003572:	d06a      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003574:	e073      	b.n	800365e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003576:	2b70      	cmp	r3, #112	; 0x70
 8003578:	d00d      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x90>
 800357a:	2b70      	cmp	r3, #112	; 0x70
 800357c:	d804      	bhi.n	8003588 <HAL_TIM_ConfigClockSource+0x82>
 800357e:	2b50      	cmp	r3, #80	; 0x50
 8003580:	d033      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0xe4>
 8003582:	2b60      	cmp	r3, #96	; 0x60
 8003584:	d041      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003586:	e06a      	b.n	800365e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358c:	d066      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x156>
 800358e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003592:	d017      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003594:	e063      	b.n	800365e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6899      	ldr	r1, [r3, #8]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f000 f98b 	bl	80038c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	609a      	str	r2, [r3, #8]
      break;
 80035c2:	e04c      	b.n	800365e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6899      	ldr	r1, [r3, #8]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f000 f974 	bl	80038c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e6:	609a      	str	r2, [r3, #8]
      break;
 80035e8:	e039      	b.n	800365e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f000 f8e8 	bl	80037cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2150      	movs	r1, #80	; 0x50
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f941 	bl	800388a <TIM_ITRx_SetConfig>
      break;
 8003608:	e029      	b.n	800365e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	461a      	mov	r2, r3
 8003618:	f000 f907 	bl	800382a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2160      	movs	r1, #96	; 0x60
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f931 	bl	800388a <TIM_ITRx_SetConfig>
      break;
 8003628:	e019      	b.n	800365e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	461a      	mov	r2, r3
 8003638:	f000 f8c8 	bl	80037cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2140      	movs	r1, #64	; 0x40
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f921 	bl	800388a <TIM_ITRx_SetConfig>
      break;
 8003648:	e009      	b.n	800365e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f000 f918 	bl	800388a <TIM_ITRx_SetConfig>
      break;
 800365a:	e000      	b.n	800365e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800365c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a32      	ldr	r2, [pc, #200]	; (80037b8 <TIM_Base_SetConfig+0xdc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d007      	beq.n	8003704 <TIM_Base_SetConfig+0x28>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fa:	d003      	beq.n	8003704 <TIM_Base_SetConfig+0x28>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a2f      	ldr	r2, [pc, #188]	; (80037bc <TIM_Base_SetConfig+0xe0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d108      	bne.n	8003716 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a27      	ldr	r2, [pc, #156]	; (80037b8 <TIM_Base_SetConfig+0xdc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <TIM_Base_SetConfig+0x6a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003724:	d00f      	beq.n	8003746 <TIM_Base_SetConfig+0x6a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a24      	ldr	r2, [pc, #144]	; (80037bc <TIM_Base_SetConfig+0xe0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00b      	beq.n	8003746 <TIM_Base_SetConfig+0x6a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <TIM_Base_SetConfig+0xe4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d007      	beq.n	8003746 <TIM_Base_SetConfig+0x6a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a22      	ldr	r2, [pc, #136]	; (80037c4 <TIM_Base_SetConfig+0xe8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d003      	beq.n	8003746 <TIM_Base_SetConfig+0x6a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <TIM_Base_SetConfig+0xec>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d108      	bne.n	8003758 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <TIM_Base_SetConfig+0xdc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00b      	beq.n	800379c <TIM_Base_SetConfig+0xc0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a0e      	ldr	r2, [pc, #56]	; (80037c0 <TIM_Base_SetConfig+0xe4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d007      	beq.n	800379c <TIM_Base_SetConfig+0xc0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a0d      	ldr	r2, [pc, #52]	; (80037c4 <TIM_Base_SetConfig+0xe8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d003      	beq.n	800379c <TIM_Base_SetConfig+0xc0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a0c      	ldr	r2, [pc, #48]	; (80037c8 <TIM_Base_SetConfig+0xec>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d103      	bne.n	80037a4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	615a      	str	r2, [r3, #20]
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40014000 	.word	0x40014000
 80037c4:	40014400 	.word	0x40014400
 80037c8:	40014800 	.word	0x40014800

080037cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f023 0201 	bic.w	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 030a 	bic.w	r3, r3, #10
 8003808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800382a:	b480      	push	{r7}
 800382c:	b087      	sub	sp, #28
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f023 0210 	bic.w	r2, r3, #16
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	031b      	lsls	r3, r3, #12
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f043 0307 	orr.w	r3, r3, #7
 80038ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	609a      	str	r2, [r3, #8]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	021a      	lsls	r2, r3, #8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	609a      	str	r2, [r3, #8]
}
 80038f4:	bf00      	nop
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003914:	2302      	movs	r3, #2
 8003916:	e054      	b.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a24      	ldr	r2, [pc, #144]	; (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003948:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00e      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003980:	d009      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d004      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a11      	ldr	r2, [pc, #68]	; (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d10c      	bne.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40014000 	.word	0x40014000

080039dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <__libc_init_array>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4e0d      	ldr	r6, [pc, #52]	; (8003a50 <__libc_init_array+0x38>)
 8003a1c:	4c0d      	ldr	r4, [pc, #52]	; (8003a54 <__libc_init_array+0x3c>)
 8003a1e:	1ba4      	subs	r4, r4, r6
 8003a20:	10a4      	asrs	r4, r4, #2
 8003a22:	2500      	movs	r5, #0
 8003a24:	42a5      	cmp	r5, r4
 8003a26:	d109      	bne.n	8003a3c <__libc_init_array+0x24>
 8003a28:	4e0b      	ldr	r6, [pc, #44]	; (8003a58 <__libc_init_array+0x40>)
 8003a2a:	4c0c      	ldr	r4, [pc, #48]	; (8003a5c <__libc_init_array+0x44>)
 8003a2c:	f001 f832 	bl	8004a94 <_init>
 8003a30:	1ba4      	subs	r4, r4, r6
 8003a32:	10a4      	asrs	r4, r4, #2
 8003a34:	2500      	movs	r5, #0
 8003a36:	42a5      	cmp	r5, r4
 8003a38:	d105      	bne.n	8003a46 <__libc_init_array+0x2e>
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
 8003a3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a40:	4798      	blx	r3
 8003a42:	3501      	adds	r5, #1
 8003a44:	e7ee      	b.n	8003a24 <__libc_init_array+0xc>
 8003a46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a4a:	4798      	blx	r3
 8003a4c:	3501      	adds	r5, #1
 8003a4e:	e7f2      	b.n	8003a36 <__libc_init_array+0x1e>
 8003a50:	08004ce8 	.word	0x08004ce8
 8003a54:	08004ce8 	.word	0x08004ce8
 8003a58:	08004ce8 	.word	0x08004ce8
 8003a5c:	08004cec 	.word	0x08004cec

08003a60 <memset>:
 8003a60:	4402      	add	r2, r0
 8003a62:	4603      	mov	r3, r0
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d100      	bne.n	8003a6a <memset+0xa>
 8003a68:	4770      	bx	lr
 8003a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a6e:	e7f9      	b.n	8003a64 <memset+0x4>

08003a70 <sin>:
 8003a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a72:	ec51 0b10 	vmov	r0, r1, d0
 8003a76:	4a20      	ldr	r2, [pc, #128]	; (8003af8 <sin+0x88>)
 8003a78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	dc07      	bgt.n	8003a90 <sin+0x20>
 8003a80:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003af0 <sin+0x80>
 8003a84:	2000      	movs	r0, #0
 8003a86:	f000 fe37 	bl	80046f8 <__kernel_sin>
 8003a8a:	ec51 0b10 	vmov	r0, r1, d0
 8003a8e:	e007      	b.n	8003aa0 <sin+0x30>
 8003a90:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <sin+0x8c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	dd09      	ble.n	8003aaa <sin+0x3a>
 8003a96:	ee10 2a10 	vmov	r2, s0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	f7fc fb98 	bl	80001d0 <__aeabi_dsub>
 8003aa0:	ec41 0b10 	vmov	d0, r0, r1
 8003aa4:	b005      	add	sp, #20
 8003aa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aaa:	4668      	mov	r0, sp
 8003aac:	f000 f828 	bl	8003b00 <__ieee754_rem_pio2>
 8003ab0:	f000 0003 	and.w	r0, r0, #3
 8003ab4:	2801      	cmp	r0, #1
 8003ab6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003aba:	ed9d 0b00 	vldr	d0, [sp]
 8003abe:	d004      	beq.n	8003aca <sin+0x5a>
 8003ac0:	2802      	cmp	r0, #2
 8003ac2:	d005      	beq.n	8003ad0 <sin+0x60>
 8003ac4:	b970      	cbnz	r0, 8003ae4 <sin+0x74>
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	e7dd      	b.n	8003a86 <sin+0x16>
 8003aca:	f000 fa0d 	bl	8003ee8 <__kernel_cos>
 8003ace:	e7dc      	b.n	8003a8a <sin+0x1a>
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f000 fe11 	bl	80046f8 <__kernel_sin>
 8003ad6:	ec53 2b10 	vmov	r2, r3, d0
 8003ada:	ee10 0a10 	vmov	r0, s0
 8003ade:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003ae2:	e7dd      	b.n	8003aa0 <sin+0x30>
 8003ae4:	f000 fa00 	bl	8003ee8 <__kernel_cos>
 8003ae8:	e7f5      	b.n	8003ad6 <sin+0x66>
 8003aea:	bf00      	nop
 8003aec:	f3af 8000 	nop.w
	...
 8003af8:	3fe921fb 	.word	0x3fe921fb
 8003afc:	7fefffff 	.word	0x7fefffff

08003b00 <__ieee754_rem_pio2>:
 8003b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b04:	ec57 6b10 	vmov	r6, r7, d0
 8003b08:	4bc3      	ldr	r3, [pc, #780]	; (8003e18 <__ieee754_rem_pio2+0x318>)
 8003b0a:	b08d      	sub	sp, #52	; 0x34
 8003b0c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003b10:	4598      	cmp	r8, r3
 8003b12:	4604      	mov	r4, r0
 8003b14:	9704      	str	r7, [sp, #16]
 8003b16:	dc07      	bgt.n	8003b28 <__ieee754_rem_pio2+0x28>
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	ed84 0b00 	vstr	d0, [r4]
 8003b20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003b24:	2500      	movs	r5, #0
 8003b26:	e027      	b.n	8003b78 <__ieee754_rem_pio2+0x78>
 8003b28:	4bbc      	ldr	r3, [pc, #752]	; (8003e1c <__ieee754_rem_pio2+0x31c>)
 8003b2a:	4598      	cmp	r8, r3
 8003b2c:	dc75      	bgt.n	8003c1a <__ieee754_rem_pio2+0x11a>
 8003b2e:	9b04      	ldr	r3, [sp, #16]
 8003b30:	4dbb      	ldr	r5, [pc, #748]	; (8003e20 <__ieee754_rem_pio2+0x320>)
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	ee10 0a10 	vmov	r0, s0
 8003b38:	a3a9      	add	r3, pc, #676	; (adr r3, 8003de0 <__ieee754_rem_pio2+0x2e0>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	4639      	mov	r1, r7
 8003b40:	dd36      	ble.n	8003bb0 <__ieee754_rem_pio2+0xb0>
 8003b42:	f7fc fb45 	bl	80001d0 <__aeabi_dsub>
 8003b46:	45a8      	cmp	r8, r5
 8003b48:	4606      	mov	r6, r0
 8003b4a:	460f      	mov	r7, r1
 8003b4c:	d018      	beq.n	8003b80 <__ieee754_rem_pio2+0x80>
 8003b4e:	a3a6      	add	r3, pc, #664	; (adr r3, 8003de8 <__ieee754_rem_pio2+0x2e8>)
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f7fc fb3c 	bl	80001d0 <__aeabi_dsub>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	e9c4 2300 	strd	r2, r3, [r4]
 8003b60:	4630      	mov	r0, r6
 8003b62:	4639      	mov	r1, r7
 8003b64:	f7fc fb34 	bl	80001d0 <__aeabi_dsub>
 8003b68:	a39f      	add	r3, pc, #636	; (adr r3, 8003de8 <__ieee754_rem_pio2+0x2e8>)
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f7fc fb2f 	bl	80001d0 <__aeabi_dsub>
 8003b72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003b76:	2501      	movs	r5, #1
 8003b78:	4628      	mov	r0, r5
 8003b7a:	b00d      	add	sp, #52	; 0x34
 8003b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b80:	a39b      	add	r3, pc, #620	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2f0>)
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	f7fc fb23 	bl	80001d0 <__aeabi_dsub>
 8003b8a:	a39b      	add	r3, pc, #620	; (adr r3, 8003df8 <__ieee754_rem_pio2+0x2f8>)
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	4606      	mov	r6, r0
 8003b92:	460f      	mov	r7, r1
 8003b94:	f7fc fb1c 	bl	80001d0 <__aeabi_dsub>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	e9c4 2300 	strd	r2, r3, [r4]
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	4639      	mov	r1, r7
 8003ba4:	f7fc fb14 	bl	80001d0 <__aeabi_dsub>
 8003ba8:	a393      	add	r3, pc, #588	; (adr r3, 8003df8 <__ieee754_rem_pio2+0x2f8>)
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	e7de      	b.n	8003b6e <__ieee754_rem_pio2+0x6e>
 8003bb0:	f7fc fb10 	bl	80001d4 <__adddf3>
 8003bb4:	45a8      	cmp	r8, r5
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	460f      	mov	r7, r1
 8003bba:	d016      	beq.n	8003bea <__ieee754_rem_pio2+0xea>
 8003bbc:	a38a      	add	r3, pc, #552	; (adr r3, 8003de8 <__ieee754_rem_pio2+0x2e8>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f7fc fb07 	bl	80001d4 <__adddf3>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	e9c4 2300 	strd	r2, r3, [r4]
 8003bce:	4630      	mov	r0, r6
 8003bd0:	4639      	mov	r1, r7
 8003bd2:	f7fc fafd 	bl	80001d0 <__aeabi_dsub>
 8003bd6:	a384      	add	r3, pc, #528	; (adr r3, 8003de8 <__ieee754_rem_pio2+0x2e8>)
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	f7fc fafa 	bl	80001d4 <__adddf3>
 8003be0:	f04f 35ff 	mov.w	r5, #4294967295
 8003be4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003be8:	e7c6      	b.n	8003b78 <__ieee754_rem_pio2+0x78>
 8003bea:	a381      	add	r3, pc, #516	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2f0>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f7fc faf0 	bl	80001d4 <__adddf3>
 8003bf4:	a380      	add	r3, pc, #512	; (adr r3, 8003df8 <__ieee754_rem_pio2+0x2f8>)
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	460f      	mov	r7, r1
 8003bfe:	f7fc fae9 	bl	80001d4 <__adddf3>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	e9c4 2300 	strd	r2, r3, [r4]
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	4639      	mov	r1, r7
 8003c0e:	f7fc fadf 	bl	80001d0 <__aeabi_dsub>
 8003c12:	a379      	add	r3, pc, #484	; (adr r3, 8003df8 <__ieee754_rem_pio2+0x2f8>)
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	e7e0      	b.n	8003bdc <__ieee754_rem_pio2+0xdc>
 8003c1a:	4b82      	ldr	r3, [pc, #520]	; (8003e24 <__ieee754_rem_pio2+0x324>)
 8003c1c:	4598      	cmp	r8, r3
 8003c1e:	f300 80d0 	bgt.w	8003dc2 <__ieee754_rem_pio2+0x2c2>
 8003c22:	f000 fe23 	bl	800486c <fabs>
 8003c26:	ec57 6b10 	vmov	r6, r7, d0
 8003c2a:	ee10 0a10 	vmov	r0, s0
 8003c2e:	a374      	add	r3, pc, #464	; (adr r3, 8003e00 <__ieee754_rem_pio2+0x300>)
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	4639      	mov	r1, r7
 8003c36:	f7fc fc83 	bl	8000540 <__aeabi_dmul>
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4b7a      	ldr	r3, [pc, #488]	; (8003e28 <__ieee754_rem_pio2+0x328>)
 8003c3e:	f7fc fac9 	bl	80001d4 <__adddf3>
 8003c42:	f7fc ff17 	bl	8000a74 <__aeabi_d2iz>
 8003c46:	4605      	mov	r5, r0
 8003c48:	f7fc fc10 	bl	800046c <__aeabi_i2d>
 8003c4c:	a364      	add	r3, pc, #400	; (adr r3, 8003de0 <__ieee754_rem_pio2+0x2e0>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c56:	f7fc fc73 	bl	8000540 <__aeabi_dmul>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4630      	mov	r0, r6
 8003c60:	4639      	mov	r1, r7
 8003c62:	f7fc fab5 	bl	80001d0 <__aeabi_dsub>
 8003c66:	a360      	add	r3, pc, #384	; (adr r3, 8003de8 <__ieee754_rem_pio2+0x2e8>)
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	4682      	mov	sl, r0
 8003c6e:	468b      	mov	fp, r1
 8003c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c74:	f7fc fc64 	bl	8000540 <__aeabi_dmul>
 8003c78:	2d1f      	cmp	r5, #31
 8003c7a:	4606      	mov	r6, r0
 8003c7c:	460f      	mov	r7, r1
 8003c7e:	dc0c      	bgt.n	8003c9a <__ieee754_rem_pio2+0x19a>
 8003c80:	1e6a      	subs	r2, r5, #1
 8003c82:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <__ieee754_rem_pio2+0x32c>)
 8003c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c88:	4543      	cmp	r3, r8
 8003c8a:	d006      	beq.n	8003c9a <__ieee754_rem_pio2+0x19a>
 8003c8c:	4632      	mov	r2, r6
 8003c8e:	463b      	mov	r3, r7
 8003c90:	4650      	mov	r0, sl
 8003c92:	4659      	mov	r1, fp
 8003c94:	f7fc fa9c 	bl	80001d0 <__aeabi_dsub>
 8003c98:	e00e      	b.n	8003cb8 <__ieee754_rem_pio2+0x1b8>
 8003c9a:	4632      	mov	r2, r6
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	4650      	mov	r0, sl
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	f7fc fa95 	bl	80001d0 <__aeabi_dsub>
 8003ca6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003caa:	9305      	str	r3, [sp, #20]
 8003cac:	9a05      	ldr	r2, [sp, #20]
 8003cae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	dc02      	bgt.n	8003cbe <__ieee754_rem_pio2+0x1be>
 8003cb8:	e9c4 0100 	strd	r0, r1, [r4]
 8003cbc:	e039      	b.n	8003d32 <__ieee754_rem_pio2+0x232>
 8003cbe:	a34c      	add	r3, pc, #304	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2f0>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cc8:	f7fc fc3a 	bl	8000540 <__aeabi_dmul>
 8003ccc:	4606      	mov	r6, r0
 8003cce:	460f      	mov	r7, r1
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4650      	mov	r0, sl
 8003cd6:	4659      	mov	r1, fp
 8003cd8:	f7fc fa7a 	bl	80001d0 <__aeabi_dsub>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4680      	mov	r8, r0
 8003ce2:	4689      	mov	r9, r1
 8003ce4:	4650      	mov	r0, sl
 8003ce6:	4659      	mov	r1, fp
 8003ce8:	f7fc fa72 	bl	80001d0 <__aeabi_dsub>
 8003cec:	4632      	mov	r2, r6
 8003cee:	463b      	mov	r3, r7
 8003cf0:	f7fc fa6e 	bl	80001d0 <__aeabi_dsub>
 8003cf4:	a340      	add	r3, pc, #256	; (adr r3, 8003df8 <__ieee754_rem_pio2+0x2f8>)
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	460f      	mov	r7, r1
 8003cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d02:	f7fc fc1d 	bl	8000540 <__aeabi_dmul>
 8003d06:	4632      	mov	r2, r6
 8003d08:	463b      	mov	r3, r7
 8003d0a:	f7fc fa61 	bl	80001d0 <__aeabi_dsub>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4606      	mov	r6, r0
 8003d14:	460f      	mov	r7, r1
 8003d16:	4640      	mov	r0, r8
 8003d18:	4649      	mov	r1, r9
 8003d1a:	f7fc fa59 	bl	80001d0 <__aeabi_dsub>
 8003d1e:	9a05      	ldr	r2, [sp, #20]
 8003d20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b31      	cmp	r3, #49	; 0x31
 8003d28:	dc20      	bgt.n	8003d6c <__ieee754_rem_pio2+0x26c>
 8003d2a:	e9c4 0100 	strd	r0, r1, [r4]
 8003d2e:	46c2      	mov	sl, r8
 8003d30:	46cb      	mov	fp, r9
 8003d32:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003d36:	4650      	mov	r0, sl
 8003d38:	4642      	mov	r2, r8
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	f7fc fa47 	bl	80001d0 <__aeabi_dsub>
 8003d42:	463b      	mov	r3, r7
 8003d44:	4632      	mov	r2, r6
 8003d46:	f7fc fa43 	bl	80001d0 <__aeabi_dsub>
 8003d4a:	9b04      	ldr	r3, [sp, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d52:	f6bf af11 	bge.w	8003b78 <__ieee754_rem_pio2+0x78>
 8003d56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003d5a:	6063      	str	r3, [r4, #4]
 8003d5c:	f8c4 8000 	str.w	r8, [r4]
 8003d60:	60a0      	str	r0, [r4, #8]
 8003d62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d66:	60e3      	str	r3, [r4, #12]
 8003d68:	426d      	negs	r5, r5
 8003d6a:	e705      	b.n	8003b78 <__ieee754_rem_pio2+0x78>
 8003d6c:	a326      	add	r3, pc, #152	; (adr r3, 8003e08 <__ieee754_rem_pio2+0x308>)
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d76:	f7fc fbe3 	bl	8000540 <__aeabi_dmul>
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	460f      	mov	r7, r1
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4640      	mov	r0, r8
 8003d84:	4649      	mov	r1, r9
 8003d86:	f7fc fa23 	bl	80001d0 <__aeabi_dsub>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4682      	mov	sl, r0
 8003d90:	468b      	mov	fp, r1
 8003d92:	4640      	mov	r0, r8
 8003d94:	4649      	mov	r1, r9
 8003d96:	f7fc fa1b 	bl	80001d0 <__aeabi_dsub>
 8003d9a:	4632      	mov	r2, r6
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	f7fc fa17 	bl	80001d0 <__aeabi_dsub>
 8003da2:	a31b      	add	r3, pc, #108	; (adr r3, 8003e10 <__ieee754_rem_pio2+0x310>)
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	4606      	mov	r6, r0
 8003daa:	460f      	mov	r7, r1
 8003dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003db0:	f7fc fbc6 	bl	8000540 <__aeabi_dmul>
 8003db4:	4632      	mov	r2, r6
 8003db6:	463b      	mov	r3, r7
 8003db8:	f7fc fa0a 	bl	80001d0 <__aeabi_dsub>
 8003dbc:	4606      	mov	r6, r0
 8003dbe:	460f      	mov	r7, r1
 8003dc0:	e764      	b.n	8003c8c <__ieee754_rem_pio2+0x18c>
 8003dc2:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <__ieee754_rem_pio2+0x330>)
 8003dc4:	4598      	cmp	r8, r3
 8003dc6:	dd35      	ble.n	8003e34 <__ieee754_rem_pio2+0x334>
 8003dc8:	ee10 2a10 	vmov	r2, s0
 8003dcc:	463b      	mov	r3, r7
 8003dce:	4630      	mov	r0, r6
 8003dd0:	4639      	mov	r1, r7
 8003dd2:	f7fc f9fd 	bl	80001d0 <__aeabi_dsub>
 8003dd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003dda:	e9c4 0100 	strd	r0, r1, [r4]
 8003dde:	e6a1      	b.n	8003b24 <__ieee754_rem_pio2+0x24>
 8003de0:	54400000 	.word	0x54400000
 8003de4:	3ff921fb 	.word	0x3ff921fb
 8003de8:	1a626331 	.word	0x1a626331
 8003dec:	3dd0b461 	.word	0x3dd0b461
 8003df0:	1a600000 	.word	0x1a600000
 8003df4:	3dd0b461 	.word	0x3dd0b461
 8003df8:	2e037073 	.word	0x2e037073
 8003dfc:	3ba3198a 	.word	0x3ba3198a
 8003e00:	6dc9c883 	.word	0x6dc9c883
 8003e04:	3fe45f30 	.word	0x3fe45f30
 8003e08:	2e000000 	.word	0x2e000000
 8003e0c:	3ba3198a 	.word	0x3ba3198a
 8003e10:	252049c1 	.word	0x252049c1
 8003e14:	397b839a 	.word	0x397b839a
 8003e18:	3fe921fb 	.word	0x3fe921fb
 8003e1c:	4002d97b 	.word	0x4002d97b
 8003e20:	3ff921fb 	.word	0x3ff921fb
 8003e24:	413921fb 	.word	0x413921fb
 8003e28:	3fe00000 	.word	0x3fe00000
 8003e2c:	08004b10 	.word	0x08004b10
 8003e30:	7fefffff 	.word	0x7fefffff
 8003e34:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003e38:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003e3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003e40:	4630      	mov	r0, r6
 8003e42:	460f      	mov	r7, r1
 8003e44:	f7fc fe16 	bl	8000a74 <__aeabi_d2iz>
 8003e48:	f7fc fb10 	bl	800046c <__aeabi_i2d>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4630      	mov	r0, r6
 8003e52:	4639      	mov	r1, r7
 8003e54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e58:	f7fc f9ba 	bl	80001d0 <__aeabi_dsub>
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	4b1f      	ldr	r3, [pc, #124]	; (8003edc <__ieee754_rem_pio2+0x3dc>)
 8003e60:	f7fc fb6e 	bl	8000540 <__aeabi_dmul>
 8003e64:	460f      	mov	r7, r1
 8003e66:	4606      	mov	r6, r0
 8003e68:	f7fc fe04 	bl	8000a74 <__aeabi_d2iz>
 8003e6c:	f7fc fafe 	bl	800046c <__aeabi_i2d>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4630      	mov	r0, r6
 8003e76:	4639      	mov	r1, r7
 8003e78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e7c:	f7fc f9a8 	bl	80001d0 <__aeabi_dsub>
 8003e80:	2200      	movs	r2, #0
 8003e82:	4b16      	ldr	r3, [pc, #88]	; (8003edc <__ieee754_rem_pio2+0x3dc>)
 8003e84:	f7fc fb5c 	bl	8000540 <__aeabi_dmul>
 8003e88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003e8c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003e90:	f04f 0803 	mov.w	r8, #3
 8003e94:	2600      	movs	r6, #0
 8003e96:	2700      	movs	r7, #0
 8003e98:	4632      	mov	r2, r6
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003ea0:	f108 3aff 	add.w	sl, r8, #4294967295
 8003ea4:	f7fc fdb4 	bl	8000a10 <__aeabi_dcmpeq>
 8003ea8:	b9b0      	cbnz	r0, 8003ed8 <__ieee754_rem_pio2+0x3d8>
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <__ieee754_rem_pio2+0x3e0>)
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	2302      	movs	r3, #2
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	462a      	mov	r2, r5
 8003eb4:	4643      	mov	r3, r8
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	a806      	add	r0, sp, #24
 8003eba:	f000 f8dd 	bl	8004078 <__kernel_rem_pio2>
 8003ebe:	9b04      	ldr	r3, [sp, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	f6bf ae58 	bge.w	8003b78 <__ieee754_rem_pio2+0x78>
 8003ec8:	6863      	ldr	r3, [r4, #4]
 8003eca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ece:	6063      	str	r3, [r4, #4]
 8003ed0:	68e3      	ldr	r3, [r4, #12]
 8003ed2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ed6:	e746      	b.n	8003d66 <__ieee754_rem_pio2+0x266>
 8003ed8:	46d0      	mov	r8, sl
 8003eda:	e7dd      	b.n	8003e98 <__ieee754_rem_pio2+0x398>
 8003edc:	41700000 	.word	0x41700000
 8003ee0:	08004b90 	.word	0x08004b90
 8003ee4:	00000000 	.word	0x00000000

08003ee8 <__kernel_cos>:
 8003ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eec:	ec59 8b10 	vmov	r8, r9, d0
 8003ef0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8003ef4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003ef8:	ed2d 8b02 	vpush	{d8}
 8003efc:	eeb0 8a41 	vmov.f32	s16, s2
 8003f00:	eef0 8a61 	vmov.f32	s17, s3
 8003f04:	da07      	bge.n	8003f16 <__kernel_cos+0x2e>
 8003f06:	ee10 0a10 	vmov	r0, s0
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	f7fc fdb2 	bl	8000a74 <__aeabi_d2iz>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	f000 8089 	beq.w	8004028 <__kernel_cos+0x140>
 8003f16:	4642      	mov	r2, r8
 8003f18:	464b      	mov	r3, r9
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	f7fc fb0f 	bl	8000540 <__aeabi_dmul>
 8003f22:	2200      	movs	r2, #0
 8003f24:	4b4e      	ldr	r3, [pc, #312]	; (8004060 <__kernel_cos+0x178>)
 8003f26:	4604      	mov	r4, r0
 8003f28:	460d      	mov	r5, r1
 8003f2a:	f7fc fb09 	bl	8000540 <__aeabi_dmul>
 8003f2e:	a340      	add	r3, pc, #256	; (adr r3, 8004030 <__kernel_cos+0x148>)
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	4682      	mov	sl, r0
 8003f36:	468b      	mov	fp, r1
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f7fc fb00 	bl	8000540 <__aeabi_dmul>
 8003f40:	a33d      	add	r3, pc, #244	; (adr r3, 8004038 <__kernel_cos+0x150>)
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f7fc f945 	bl	80001d4 <__adddf3>
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	f7fc faf7 	bl	8000540 <__aeabi_dmul>
 8003f52:	a33b      	add	r3, pc, #236	; (adr r3, 8004040 <__kernel_cos+0x158>)
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f7fc f93a 	bl	80001d0 <__aeabi_dsub>
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	462b      	mov	r3, r5
 8003f60:	f7fc faee 	bl	8000540 <__aeabi_dmul>
 8003f64:	a338      	add	r3, pc, #224	; (adr r3, 8004048 <__kernel_cos+0x160>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f7fc f933 	bl	80001d4 <__adddf3>
 8003f6e:	4622      	mov	r2, r4
 8003f70:	462b      	mov	r3, r5
 8003f72:	f7fc fae5 	bl	8000540 <__aeabi_dmul>
 8003f76:	a336      	add	r3, pc, #216	; (adr r3, 8004050 <__kernel_cos+0x168>)
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f7fc f928 	bl	80001d0 <__aeabi_dsub>
 8003f80:	4622      	mov	r2, r4
 8003f82:	462b      	mov	r3, r5
 8003f84:	f7fc fadc 	bl	8000540 <__aeabi_dmul>
 8003f88:	a333      	add	r3, pc, #204	; (adr r3, 8004058 <__kernel_cos+0x170>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc f921 	bl	80001d4 <__adddf3>
 8003f92:	4622      	mov	r2, r4
 8003f94:	462b      	mov	r3, r5
 8003f96:	f7fc fad3 	bl	8000540 <__aeabi_dmul>
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	f7fc facf 	bl	8000540 <__aeabi_dmul>
 8003fa2:	ec53 2b18 	vmov	r2, r3, d8
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	460d      	mov	r5, r1
 8003faa:	4640      	mov	r0, r8
 8003fac:	4649      	mov	r1, r9
 8003fae:	f7fc fac7 	bl	8000540 <__aeabi_dmul>
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f7fc f909 	bl	80001d0 <__aeabi_dsub>
 8003fbe:	4b29      	ldr	r3, [pc, #164]	; (8004064 <__kernel_cos+0x17c>)
 8003fc0:	429e      	cmp	r6, r3
 8003fc2:	4680      	mov	r8, r0
 8003fc4:	4689      	mov	r9, r1
 8003fc6:	dc11      	bgt.n	8003fec <__kernel_cos+0x104>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4650      	mov	r0, sl
 8003fce:	4659      	mov	r1, fp
 8003fd0:	f7fc f8fe 	bl	80001d0 <__aeabi_dsub>
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4924      	ldr	r1, [pc, #144]	; (8004068 <__kernel_cos+0x180>)
 8003fd8:	4602      	mov	r2, r0
 8003fda:	2000      	movs	r0, #0
 8003fdc:	f7fc f8f8 	bl	80001d0 <__aeabi_dsub>
 8003fe0:	ecbd 8b02 	vpop	{d8}
 8003fe4:	ec41 0b10 	vmov	d0, r0, r1
 8003fe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fec:	4b1f      	ldr	r3, [pc, #124]	; (800406c <__kernel_cos+0x184>)
 8003fee:	491e      	ldr	r1, [pc, #120]	; (8004068 <__kernel_cos+0x180>)
 8003ff0:	429e      	cmp	r6, r3
 8003ff2:	bfcc      	ite	gt
 8003ff4:	4d1e      	ldrgt	r5, [pc, #120]	; (8004070 <__kernel_cos+0x188>)
 8003ff6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003ffa:	2400      	movs	r4, #0
 8003ffc:	4622      	mov	r2, r4
 8003ffe:	462b      	mov	r3, r5
 8004000:	2000      	movs	r0, #0
 8004002:	f7fc f8e5 	bl	80001d0 <__aeabi_dsub>
 8004006:	4622      	mov	r2, r4
 8004008:	4606      	mov	r6, r0
 800400a:	460f      	mov	r7, r1
 800400c:	462b      	mov	r3, r5
 800400e:	4650      	mov	r0, sl
 8004010:	4659      	mov	r1, fp
 8004012:	f7fc f8dd 	bl	80001d0 <__aeabi_dsub>
 8004016:	4642      	mov	r2, r8
 8004018:	464b      	mov	r3, r9
 800401a:	f7fc f8d9 	bl	80001d0 <__aeabi_dsub>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4630      	mov	r0, r6
 8004024:	4639      	mov	r1, r7
 8004026:	e7d9      	b.n	8003fdc <__kernel_cos+0xf4>
 8004028:	2000      	movs	r0, #0
 800402a:	490f      	ldr	r1, [pc, #60]	; (8004068 <__kernel_cos+0x180>)
 800402c:	e7d8      	b.n	8003fe0 <__kernel_cos+0xf8>
 800402e:	bf00      	nop
 8004030:	be8838d4 	.word	0xbe8838d4
 8004034:	bda8fae9 	.word	0xbda8fae9
 8004038:	bdb4b1c4 	.word	0xbdb4b1c4
 800403c:	3e21ee9e 	.word	0x3e21ee9e
 8004040:	809c52ad 	.word	0x809c52ad
 8004044:	3e927e4f 	.word	0x3e927e4f
 8004048:	19cb1590 	.word	0x19cb1590
 800404c:	3efa01a0 	.word	0x3efa01a0
 8004050:	16c15177 	.word	0x16c15177
 8004054:	3f56c16c 	.word	0x3f56c16c
 8004058:	5555554c 	.word	0x5555554c
 800405c:	3fa55555 	.word	0x3fa55555
 8004060:	3fe00000 	.word	0x3fe00000
 8004064:	3fd33332 	.word	0x3fd33332
 8004068:	3ff00000 	.word	0x3ff00000
 800406c:	3fe90000 	.word	0x3fe90000
 8004070:	3fd20000 	.word	0x3fd20000
 8004074:	00000000 	.word	0x00000000

08004078 <__kernel_rem_pio2>:
 8004078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407c:	ed2d 8b02 	vpush	{d8}
 8004080:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004084:	1ed4      	subs	r4, r2, #3
 8004086:	9308      	str	r3, [sp, #32]
 8004088:	9101      	str	r1, [sp, #4]
 800408a:	4bc5      	ldr	r3, [pc, #788]	; (80043a0 <__kernel_rem_pio2+0x328>)
 800408c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800408e:	9009      	str	r0, [sp, #36]	; 0x24
 8004090:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004094:	9304      	str	r3, [sp, #16]
 8004096:	9b08      	ldr	r3, [sp, #32]
 8004098:	3b01      	subs	r3, #1
 800409a:	9307      	str	r3, [sp, #28]
 800409c:	2318      	movs	r3, #24
 800409e:	fb94 f4f3 	sdiv	r4, r4, r3
 80040a2:	f06f 0317 	mvn.w	r3, #23
 80040a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80040aa:	fb04 3303 	mla	r3, r4, r3, r3
 80040ae:	eb03 0a02 	add.w	sl, r3, r2
 80040b2:	9b04      	ldr	r3, [sp, #16]
 80040b4:	9a07      	ldr	r2, [sp, #28]
 80040b6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004390 <__kernel_rem_pio2+0x318>
 80040ba:	eb03 0802 	add.w	r8, r3, r2
 80040be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80040c0:	1aa7      	subs	r7, r4, r2
 80040c2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80040c6:	ae22      	add	r6, sp, #136	; 0x88
 80040c8:	2500      	movs	r5, #0
 80040ca:	4545      	cmp	r5, r8
 80040cc:	dd13      	ble.n	80040f6 <__kernel_rem_pio2+0x7e>
 80040ce:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8004390 <__kernel_rem_pio2+0x318>
 80040d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80040d6:	2600      	movs	r6, #0
 80040d8:	9b04      	ldr	r3, [sp, #16]
 80040da:	429e      	cmp	r6, r3
 80040dc:	dc32      	bgt.n	8004144 <__kernel_rem_pio2+0xcc>
 80040de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e0:	9302      	str	r3, [sp, #8]
 80040e2:	9b08      	ldr	r3, [sp, #32]
 80040e4:	199d      	adds	r5, r3, r6
 80040e6:	ab22      	add	r3, sp, #136	; 0x88
 80040e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80040ec:	9306      	str	r3, [sp, #24]
 80040ee:	ec59 8b18 	vmov	r8, r9, d8
 80040f2:	2700      	movs	r7, #0
 80040f4:	e01f      	b.n	8004136 <__kernel_rem_pio2+0xbe>
 80040f6:	42ef      	cmn	r7, r5
 80040f8:	d407      	bmi.n	800410a <__kernel_rem_pio2+0x92>
 80040fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80040fe:	f7fc f9b5 	bl	800046c <__aeabi_i2d>
 8004102:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004106:	3501      	adds	r5, #1
 8004108:	e7df      	b.n	80040ca <__kernel_rem_pio2+0x52>
 800410a:	ec51 0b18 	vmov	r0, r1, d8
 800410e:	e7f8      	b.n	8004102 <__kernel_rem_pio2+0x8a>
 8004110:	9906      	ldr	r1, [sp, #24]
 8004112:	9d02      	ldr	r5, [sp, #8]
 8004114:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004118:	9106      	str	r1, [sp, #24]
 800411a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800411e:	9502      	str	r5, [sp, #8]
 8004120:	f7fc fa0e 	bl	8000540 <__aeabi_dmul>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4640      	mov	r0, r8
 800412a:	4649      	mov	r1, r9
 800412c:	f7fc f852 	bl	80001d4 <__adddf3>
 8004130:	3701      	adds	r7, #1
 8004132:	4680      	mov	r8, r0
 8004134:	4689      	mov	r9, r1
 8004136:	9b07      	ldr	r3, [sp, #28]
 8004138:	429f      	cmp	r7, r3
 800413a:	dde9      	ble.n	8004110 <__kernel_rem_pio2+0x98>
 800413c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004140:	3601      	adds	r6, #1
 8004142:	e7c9      	b.n	80040d8 <__kernel_rem_pio2+0x60>
 8004144:	9b04      	ldr	r3, [sp, #16]
 8004146:	aa0e      	add	r2, sp, #56	; 0x38
 8004148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800414c:	930c      	str	r3, [sp, #48]	; 0x30
 800414e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004150:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004154:	9c04      	ldr	r4, [sp, #16]
 8004156:	930b      	str	r3, [sp, #44]	; 0x2c
 8004158:	ab9a      	add	r3, sp, #616	; 0x268
 800415a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800415e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004162:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004166:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800416a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800416e:	ab9a      	add	r3, sp, #616	; 0x268
 8004170:	445b      	add	r3, fp
 8004172:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8004176:	2500      	movs	r5, #0
 8004178:	1b63      	subs	r3, r4, r5
 800417a:	2b00      	cmp	r3, #0
 800417c:	dc78      	bgt.n	8004270 <__kernel_rem_pio2+0x1f8>
 800417e:	4650      	mov	r0, sl
 8004180:	ec49 8b10 	vmov	d0, r8, r9
 8004184:	f000 fc00 	bl	8004988 <scalbn>
 8004188:	ec57 6b10 	vmov	r6, r7, d0
 800418c:	2200      	movs	r2, #0
 800418e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004192:	ee10 0a10 	vmov	r0, s0
 8004196:	4639      	mov	r1, r7
 8004198:	f7fc f9d2 	bl	8000540 <__aeabi_dmul>
 800419c:	ec41 0b10 	vmov	d0, r0, r1
 80041a0:	f000 fb6e 	bl	8004880 <floor>
 80041a4:	2200      	movs	r2, #0
 80041a6:	ec51 0b10 	vmov	r0, r1, d0
 80041aa:	4b7e      	ldr	r3, [pc, #504]	; (80043a4 <__kernel_rem_pio2+0x32c>)
 80041ac:	f7fc f9c8 	bl	8000540 <__aeabi_dmul>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4630      	mov	r0, r6
 80041b6:	4639      	mov	r1, r7
 80041b8:	f7fc f80a 	bl	80001d0 <__aeabi_dsub>
 80041bc:	460f      	mov	r7, r1
 80041be:	4606      	mov	r6, r0
 80041c0:	f7fc fc58 	bl	8000a74 <__aeabi_d2iz>
 80041c4:	9006      	str	r0, [sp, #24]
 80041c6:	f7fc f951 	bl	800046c <__aeabi_i2d>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4630      	mov	r0, r6
 80041d0:	4639      	mov	r1, r7
 80041d2:	f7fb fffd 	bl	80001d0 <__aeabi_dsub>
 80041d6:	f1ba 0f00 	cmp.w	sl, #0
 80041da:	4606      	mov	r6, r0
 80041dc:	460f      	mov	r7, r1
 80041de:	dd6c      	ble.n	80042ba <__kernel_rem_pio2+0x242>
 80041e0:	1e62      	subs	r2, r4, #1
 80041e2:	ab0e      	add	r3, sp, #56	; 0x38
 80041e4:	f1ca 0118 	rsb	r1, sl, #24
 80041e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80041ec:	9d06      	ldr	r5, [sp, #24]
 80041ee:	fa40 f301 	asr.w	r3, r0, r1
 80041f2:	441d      	add	r5, r3
 80041f4:	408b      	lsls	r3, r1
 80041f6:	1ac0      	subs	r0, r0, r3
 80041f8:	ab0e      	add	r3, sp, #56	; 0x38
 80041fa:	9506      	str	r5, [sp, #24]
 80041fc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004200:	f1ca 0317 	rsb	r3, sl, #23
 8004204:	fa40 f303 	asr.w	r3, r0, r3
 8004208:	9302      	str	r3, [sp, #8]
 800420a:	9b02      	ldr	r3, [sp, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	dd62      	ble.n	80042d6 <__kernel_rem_pio2+0x25e>
 8004210:	9b06      	ldr	r3, [sp, #24]
 8004212:	2200      	movs	r2, #0
 8004214:	3301      	adds	r3, #1
 8004216:	9306      	str	r3, [sp, #24]
 8004218:	4615      	mov	r5, r2
 800421a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800421e:	4294      	cmp	r4, r2
 8004220:	f300 8095 	bgt.w	800434e <__kernel_rem_pio2+0x2d6>
 8004224:	f1ba 0f00 	cmp.w	sl, #0
 8004228:	dd07      	ble.n	800423a <__kernel_rem_pio2+0x1c2>
 800422a:	f1ba 0f01 	cmp.w	sl, #1
 800422e:	f000 80a2 	beq.w	8004376 <__kernel_rem_pio2+0x2fe>
 8004232:	f1ba 0f02 	cmp.w	sl, #2
 8004236:	f000 80c1 	beq.w	80043bc <__kernel_rem_pio2+0x344>
 800423a:	9b02      	ldr	r3, [sp, #8]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d14a      	bne.n	80042d6 <__kernel_rem_pio2+0x25e>
 8004240:	4632      	mov	r2, r6
 8004242:	463b      	mov	r3, r7
 8004244:	2000      	movs	r0, #0
 8004246:	4958      	ldr	r1, [pc, #352]	; (80043a8 <__kernel_rem_pio2+0x330>)
 8004248:	f7fb ffc2 	bl	80001d0 <__aeabi_dsub>
 800424c:	4606      	mov	r6, r0
 800424e:	460f      	mov	r7, r1
 8004250:	2d00      	cmp	r5, #0
 8004252:	d040      	beq.n	80042d6 <__kernel_rem_pio2+0x25e>
 8004254:	4650      	mov	r0, sl
 8004256:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004398 <__kernel_rem_pio2+0x320>
 800425a:	f000 fb95 	bl	8004988 <scalbn>
 800425e:	4630      	mov	r0, r6
 8004260:	4639      	mov	r1, r7
 8004262:	ec53 2b10 	vmov	r2, r3, d0
 8004266:	f7fb ffb3 	bl	80001d0 <__aeabi_dsub>
 800426a:	4606      	mov	r6, r0
 800426c:	460f      	mov	r7, r1
 800426e:	e032      	b.n	80042d6 <__kernel_rem_pio2+0x25e>
 8004270:	2200      	movs	r2, #0
 8004272:	4b4e      	ldr	r3, [pc, #312]	; (80043ac <__kernel_rem_pio2+0x334>)
 8004274:	4640      	mov	r0, r8
 8004276:	4649      	mov	r1, r9
 8004278:	f7fc f962 	bl	8000540 <__aeabi_dmul>
 800427c:	f7fc fbfa 	bl	8000a74 <__aeabi_d2iz>
 8004280:	f7fc f8f4 	bl	800046c <__aeabi_i2d>
 8004284:	2200      	movs	r2, #0
 8004286:	4b4a      	ldr	r3, [pc, #296]	; (80043b0 <__kernel_rem_pio2+0x338>)
 8004288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800428c:	f7fc f958 	bl	8000540 <__aeabi_dmul>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4640      	mov	r0, r8
 8004296:	4649      	mov	r1, r9
 8004298:	f7fb ff9a 	bl	80001d0 <__aeabi_dsub>
 800429c:	f7fc fbea 	bl	8000a74 <__aeabi_d2iz>
 80042a0:	ab0e      	add	r3, sp, #56	; 0x38
 80042a2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80042a6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80042aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042ae:	f7fb ff91 	bl	80001d4 <__adddf3>
 80042b2:	3501      	adds	r5, #1
 80042b4:	4680      	mov	r8, r0
 80042b6:	4689      	mov	r9, r1
 80042b8:	e75e      	b.n	8004178 <__kernel_rem_pio2+0x100>
 80042ba:	d105      	bne.n	80042c8 <__kernel_rem_pio2+0x250>
 80042bc:	1e63      	subs	r3, r4, #1
 80042be:	aa0e      	add	r2, sp, #56	; 0x38
 80042c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80042c4:	15c3      	asrs	r3, r0, #23
 80042c6:	e79f      	b.n	8004208 <__kernel_rem_pio2+0x190>
 80042c8:	2200      	movs	r2, #0
 80042ca:	4b3a      	ldr	r3, [pc, #232]	; (80043b4 <__kernel_rem_pio2+0x33c>)
 80042cc:	f7fc fbbe 	bl	8000a4c <__aeabi_dcmpge>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d139      	bne.n	8004348 <__kernel_rem_pio2+0x2d0>
 80042d4:	9002      	str	r0, [sp, #8]
 80042d6:	2200      	movs	r2, #0
 80042d8:	2300      	movs	r3, #0
 80042da:	4630      	mov	r0, r6
 80042dc:	4639      	mov	r1, r7
 80042de:	f7fc fb97 	bl	8000a10 <__aeabi_dcmpeq>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	f000 80c7 	beq.w	8004476 <__kernel_rem_pio2+0x3fe>
 80042e8:	1e65      	subs	r5, r4, #1
 80042ea:	462b      	mov	r3, r5
 80042ec:	2200      	movs	r2, #0
 80042ee:	9904      	ldr	r1, [sp, #16]
 80042f0:	428b      	cmp	r3, r1
 80042f2:	da6a      	bge.n	80043ca <__kernel_rem_pio2+0x352>
 80042f4:	2a00      	cmp	r2, #0
 80042f6:	f000 8088 	beq.w	800440a <__kernel_rem_pio2+0x392>
 80042fa:	ab0e      	add	r3, sp, #56	; 0x38
 80042fc:	f1aa 0a18 	sub.w	sl, sl, #24
 8004300:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80b4 	beq.w	8004472 <__kernel_rem_pio2+0x3fa>
 800430a:	4650      	mov	r0, sl
 800430c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8004398 <__kernel_rem_pio2+0x320>
 8004310:	f000 fb3a 	bl	8004988 <scalbn>
 8004314:	00ec      	lsls	r4, r5, #3
 8004316:	ab72      	add	r3, sp, #456	; 0x1c8
 8004318:	191e      	adds	r6, r3, r4
 800431a:	ec59 8b10 	vmov	r8, r9, d0
 800431e:	f106 0a08 	add.w	sl, r6, #8
 8004322:	462f      	mov	r7, r5
 8004324:	2f00      	cmp	r7, #0
 8004326:	f280 80df 	bge.w	80044e8 <__kernel_rem_pio2+0x470>
 800432a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8004390 <__kernel_rem_pio2+0x318>
 800432e:	f04f 0a00 	mov.w	sl, #0
 8004332:	eba5 030a 	sub.w	r3, r5, sl
 8004336:	2b00      	cmp	r3, #0
 8004338:	f2c0 810a 	blt.w	8004550 <__kernel_rem_pio2+0x4d8>
 800433c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80043b8 <__kernel_rem_pio2+0x340>
 8004340:	ec59 8b18 	vmov	r8, r9, d8
 8004344:	2700      	movs	r7, #0
 8004346:	e0f5      	b.n	8004534 <__kernel_rem_pio2+0x4bc>
 8004348:	2302      	movs	r3, #2
 800434a:	9302      	str	r3, [sp, #8]
 800434c:	e760      	b.n	8004210 <__kernel_rem_pio2+0x198>
 800434e:	ab0e      	add	r3, sp, #56	; 0x38
 8004350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004354:	b94d      	cbnz	r5, 800436a <__kernel_rem_pio2+0x2f2>
 8004356:	b12b      	cbz	r3, 8004364 <__kernel_rem_pio2+0x2ec>
 8004358:	a80e      	add	r0, sp, #56	; 0x38
 800435a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800435e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004362:	2301      	movs	r3, #1
 8004364:	3201      	adds	r2, #1
 8004366:	461d      	mov	r5, r3
 8004368:	e759      	b.n	800421e <__kernel_rem_pio2+0x1a6>
 800436a:	a80e      	add	r0, sp, #56	; 0x38
 800436c:	1acb      	subs	r3, r1, r3
 800436e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004372:	462b      	mov	r3, r5
 8004374:	e7f6      	b.n	8004364 <__kernel_rem_pio2+0x2ec>
 8004376:	1e62      	subs	r2, r4, #1
 8004378:	ab0e      	add	r3, sp, #56	; 0x38
 800437a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004382:	a90e      	add	r1, sp, #56	; 0x38
 8004384:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004388:	e757      	b.n	800423a <__kernel_rem_pio2+0x1c2>
 800438a:	bf00      	nop
 800438c:	f3af 8000 	nop.w
	...
 800439c:	3ff00000 	.word	0x3ff00000
 80043a0:	08004cd8 	.word	0x08004cd8
 80043a4:	40200000 	.word	0x40200000
 80043a8:	3ff00000 	.word	0x3ff00000
 80043ac:	3e700000 	.word	0x3e700000
 80043b0:	41700000 	.word	0x41700000
 80043b4:	3fe00000 	.word	0x3fe00000
 80043b8:	08004c98 	.word	0x08004c98
 80043bc:	1e62      	subs	r2, r4, #1
 80043be:	ab0e      	add	r3, sp, #56	; 0x38
 80043c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80043c8:	e7db      	b.n	8004382 <__kernel_rem_pio2+0x30a>
 80043ca:	a90e      	add	r1, sp, #56	; 0x38
 80043cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	430a      	orrs	r2, r1
 80043d4:	e78b      	b.n	80042ee <__kernel_rem_pio2+0x276>
 80043d6:	3301      	adds	r3, #1
 80043d8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80043dc:	2900      	cmp	r1, #0
 80043de:	d0fa      	beq.n	80043d6 <__kernel_rem_pio2+0x35e>
 80043e0:	9a08      	ldr	r2, [sp, #32]
 80043e2:	4422      	add	r2, r4
 80043e4:	00d2      	lsls	r2, r2, #3
 80043e6:	a922      	add	r1, sp, #136	; 0x88
 80043e8:	18e3      	adds	r3, r4, r3
 80043ea:	9206      	str	r2, [sp, #24]
 80043ec:	440a      	add	r2, r1
 80043ee:	9302      	str	r3, [sp, #8]
 80043f0:	f10b 0108 	add.w	r1, fp, #8
 80043f4:	f102 0308 	add.w	r3, r2, #8
 80043f8:	1c66      	adds	r6, r4, #1
 80043fa:	910a      	str	r1, [sp, #40]	; 0x28
 80043fc:	2500      	movs	r5, #0
 80043fe:	930d      	str	r3, [sp, #52]	; 0x34
 8004400:	9b02      	ldr	r3, [sp, #8]
 8004402:	42b3      	cmp	r3, r6
 8004404:	da04      	bge.n	8004410 <__kernel_rem_pio2+0x398>
 8004406:	461c      	mov	r4, r3
 8004408:	e6a6      	b.n	8004158 <__kernel_rem_pio2+0xe0>
 800440a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800440c:	2301      	movs	r3, #1
 800440e:	e7e3      	b.n	80043d8 <__kernel_rem_pio2+0x360>
 8004410:	9b06      	ldr	r3, [sp, #24]
 8004412:	18ef      	adds	r7, r5, r3
 8004414:	ab22      	add	r3, sp, #136	; 0x88
 8004416:	441f      	add	r7, r3
 8004418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800441a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800441e:	f7fc f825 	bl	800046c <__aeabi_i2d>
 8004422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004424:	461c      	mov	r4, r3
 8004426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004428:	e9c7 0100 	strd	r0, r1, [r7]
 800442c:	eb03 0b05 	add.w	fp, r3, r5
 8004430:	2700      	movs	r7, #0
 8004432:	f04f 0800 	mov.w	r8, #0
 8004436:	f04f 0900 	mov.w	r9, #0
 800443a:	9b07      	ldr	r3, [sp, #28]
 800443c:	429f      	cmp	r7, r3
 800443e:	dd08      	ble.n	8004452 <__kernel_rem_pio2+0x3da>
 8004440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004442:	aa72      	add	r2, sp, #456	; 0x1c8
 8004444:	18eb      	adds	r3, r5, r3
 8004446:	4413      	add	r3, r2
 8004448:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800444c:	3601      	adds	r6, #1
 800444e:	3508      	adds	r5, #8
 8004450:	e7d6      	b.n	8004400 <__kernel_rem_pio2+0x388>
 8004452:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004456:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800445a:	f7fc f871 	bl	8000540 <__aeabi_dmul>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4640      	mov	r0, r8
 8004464:	4649      	mov	r1, r9
 8004466:	f7fb feb5 	bl	80001d4 <__adddf3>
 800446a:	3701      	adds	r7, #1
 800446c:	4680      	mov	r8, r0
 800446e:	4689      	mov	r9, r1
 8004470:	e7e3      	b.n	800443a <__kernel_rem_pio2+0x3c2>
 8004472:	3d01      	subs	r5, #1
 8004474:	e741      	b.n	80042fa <__kernel_rem_pio2+0x282>
 8004476:	f1ca 0000 	rsb	r0, sl, #0
 800447a:	ec47 6b10 	vmov	d0, r6, r7
 800447e:	f000 fa83 	bl	8004988 <scalbn>
 8004482:	ec57 6b10 	vmov	r6, r7, d0
 8004486:	2200      	movs	r2, #0
 8004488:	4b99      	ldr	r3, [pc, #612]	; (80046f0 <__kernel_rem_pio2+0x678>)
 800448a:	ee10 0a10 	vmov	r0, s0
 800448e:	4639      	mov	r1, r7
 8004490:	f7fc fadc 	bl	8000a4c <__aeabi_dcmpge>
 8004494:	b1f8      	cbz	r0, 80044d6 <__kernel_rem_pio2+0x45e>
 8004496:	2200      	movs	r2, #0
 8004498:	4b96      	ldr	r3, [pc, #600]	; (80046f4 <__kernel_rem_pio2+0x67c>)
 800449a:	4630      	mov	r0, r6
 800449c:	4639      	mov	r1, r7
 800449e:	f7fc f84f 	bl	8000540 <__aeabi_dmul>
 80044a2:	f7fc fae7 	bl	8000a74 <__aeabi_d2iz>
 80044a6:	4680      	mov	r8, r0
 80044a8:	f7fb ffe0 	bl	800046c <__aeabi_i2d>
 80044ac:	2200      	movs	r2, #0
 80044ae:	4b90      	ldr	r3, [pc, #576]	; (80046f0 <__kernel_rem_pio2+0x678>)
 80044b0:	f7fc f846 	bl	8000540 <__aeabi_dmul>
 80044b4:	460b      	mov	r3, r1
 80044b6:	4602      	mov	r2, r0
 80044b8:	4639      	mov	r1, r7
 80044ba:	4630      	mov	r0, r6
 80044bc:	f7fb fe88 	bl	80001d0 <__aeabi_dsub>
 80044c0:	f7fc fad8 	bl	8000a74 <__aeabi_d2iz>
 80044c4:	1c65      	adds	r5, r4, #1
 80044c6:	ab0e      	add	r3, sp, #56	; 0x38
 80044c8:	f10a 0a18 	add.w	sl, sl, #24
 80044cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80044d0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80044d4:	e719      	b.n	800430a <__kernel_rem_pio2+0x292>
 80044d6:	4630      	mov	r0, r6
 80044d8:	4639      	mov	r1, r7
 80044da:	f7fc facb 	bl	8000a74 <__aeabi_d2iz>
 80044de:	ab0e      	add	r3, sp, #56	; 0x38
 80044e0:	4625      	mov	r5, r4
 80044e2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80044e6:	e710      	b.n	800430a <__kernel_rem_pio2+0x292>
 80044e8:	ab0e      	add	r3, sp, #56	; 0x38
 80044ea:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80044ee:	f7fb ffbd 	bl	800046c <__aeabi_i2d>
 80044f2:	4642      	mov	r2, r8
 80044f4:	464b      	mov	r3, r9
 80044f6:	f7fc f823 	bl	8000540 <__aeabi_dmul>
 80044fa:	2200      	movs	r2, #0
 80044fc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004500:	4b7c      	ldr	r3, [pc, #496]	; (80046f4 <__kernel_rem_pio2+0x67c>)
 8004502:	4640      	mov	r0, r8
 8004504:	4649      	mov	r1, r9
 8004506:	f7fc f81b 	bl	8000540 <__aeabi_dmul>
 800450a:	3f01      	subs	r7, #1
 800450c:	4680      	mov	r8, r0
 800450e:	4689      	mov	r9, r1
 8004510:	e708      	b.n	8004324 <__kernel_rem_pio2+0x2ac>
 8004512:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800451e:	f7fc f80f 	bl	8000540 <__aeabi_dmul>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4640      	mov	r0, r8
 8004528:	4649      	mov	r1, r9
 800452a:	f7fb fe53 	bl	80001d4 <__adddf3>
 800452e:	3701      	adds	r7, #1
 8004530:	4680      	mov	r8, r0
 8004532:	4689      	mov	r9, r1
 8004534:	9b04      	ldr	r3, [sp, #16]
 8004536:	429f      	cmp	r7, r3
 8004538:	dc01      	bgt.n	800453e <__kernel_rem_pio2+0x4c6>
 800453a:	45ba      	cmp	sl, r7
 800453c:	dae9      	bge.n	8004512 <__kernel_rem_pio2+0x49a>
 800453e:	ab4a      	add	r3, sp, #296	; 0x128
 8004540:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004544:	e9c3 8900 	strd	r8, r9, [r3]
 8004548:	f10a 0a01 	add.w	sl, sl, #1
 800454c:	3e08      	subs	r6, #8
 800454e:	e6f0      	b.n	8004332 <__kernel_rem_pio2+0x2ba>
 8004550:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004552:	2b03      	cmp	r3, #3
 8004554:	d85b      	bhi.n	800460e <__kernel_rem_pio2+0x596>
 8004556:	e8df f003 	tbb	[pc, r3]
 800455a:	264a      	.short	0x264a
 800455c:	0226      	.short	0x0226
 800455e:	ab9a      	add	r3, sp, #616	; 0x268
 8004560:	441c      	add	r4, r3
 8004562:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004566:	46a2      	mov	sl, r4
 8004568:	46ab      	mov	fp, r5
 800456a:	f1bb 0f00 	cmp.w	fp, #0
 800456e:	dc6c      	bgt.n	800464a <__kernel_rem_pio2+0x5d2>
 8004570:	46a2      	mov	sl, r4
 8004572:	46ab      	mov	fp, r5
 8004574:	f1bb 0f01 	cmp.w	fp, #1
 8004578:	f300 8086 	bgt.w	8004688 <__kernel_rem_pio2+0x610>
 800457c:	2000      	movs	r0, #0
 800457e:	2100      	movs	r1, #0
 8004580:	2d01      	cmp	r5, #1
 8004582:	f300 80a0 	bgt.w	80046c6 <__kernel_rem_pio2+0x64e>
 8004586:	9b02      	ldr	r3, [sp, #8]
 8004588:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800458c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8004590:	2b00      	cmp	r3, #0
 8004592:	f040 809e 	bne.w	80046d2 <__kernel_rem_pio2+0x65a>
 8004596:	9b01      	ldr	r3, [sp, #4]
 8004598:	e9c3 7800 	strd	r7, r8, [r3]
 800459c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80045a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80045a4:	e033      	b.n	800460e <__kernel_rem_pio2+0x596>
 80045a6:	3408      	adds	r4, #8
 80045a8:	ab4a      	add	r3, sp, #296	; 0x128
 80045aa:	441c      	add	r4, r3
 80045ac:	462e      	mov	r6, r5
 80045ae:	2000      	movs	r0, #0
 80045b0:	2100      	movs	r1, #0
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	da3a      	bge.n	800462c <__kernel_rem_pio2+0x5b4>
 80045b6:	9b02      	ldr	r3, [sp, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d03d      	beq.n	8004638 <__kernel_rem_pio2+0x5c0>
 80045bc:	4602      	mov	r2, r0
 80045be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045c2:	9c01      	ldr	r4, [sp, #4]
 80045c4:	e9c4 2300 	strd	r2, r3, [r4]
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80045d0:	f7fb fdfe 	bl	80001d0 <__aeabi_dsub>
 80045d4:	ae4c      	add	r6, sp, #304	; 0x130
 80045d6:	2401      	movs	r4, #1
 80045d8:	42a5      	cmp	r5, r4
 80045da:	da30      	bge.n	800463e <__kernel_rem_pio2+0x5c6>
 80045dc:	9b02      	ldr	r3, [sp, #8]
 80045de:	b113      	cbz	r3, 80045e6 <__kernel_rem_pio2+0x56e>
 80045e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045e4:	4619      	mov	r1, r3
 80045e6:	9b01      	ldr	r3, [sp, #4]
 80045e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80045ec:	e00f      	b.n	800460e <__kernel_rem_pio2+0x596>
 80045ee:	ab9a      	add	r3, sp, #616	; 0x268
 80045f0:	441c      	add	r4, r3
 80045f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80045f6:	2000      	movs	r0, #0
 80045f8:	2100      	movs	r1, #0
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	da10      	bge.n	8004620 <__kernel_rem_pio2+0x5a8>
 80045fe:	9b02      	ldr	r3, [sp, #8]
 8004600:	b113      	cbz	r3, 8004608 <__kernel_rem_pio2+0x590>
 8004602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004606:	4619      	mov	r1, r3
 8004608:	9b01      	ldr	r3, [sp, #4]
 800460a:	e9c3 0100 	strd	r0, r1, [r3]
 800460e:	9b06      	ldr	r3, [sp, #24]
 8004610:	f003 0007 	and.w	r0, r3, #7
 8004614:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004618:	ecbd 8b02 	vpop	{d8}
 800461c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004620:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004624:	f7fb fdd6 	bl	80001d4 <__adddf3>
 8004628:	3d01      	subs	r5, #1
 800462a:	e7e6      	b.n	80045fa <__kernel_rem_pio2+0x582>
 800462c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004630:	f7fb fdd0 	bl	80001d4 <__adddf3>
 8004634:	3e01      	subs	r6, #1
 8004636:	e7bc      	b.n	80045b2 <__kernel_rem_pio2+0x53a>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	e7c1      	b.n	80045c2 <__kernel_rem_pio2+0x54a>
 800463e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004642:	f7fb fdc7 	bl	80001d4 <__adddf3>
 8004646:	3401      	adds	r4, #1
 8004648:	e7c6      	b.n	80045d8 <__kernel_rem_pio2+0x560>
 800464a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800464e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8004652:	4640      	mov	r0, r8
 8004654:	ec53 2b17 	vmov	r2, r3, d7
 8004658:	4649      	mov	r1, r9
 800465a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800465e:	f7fb fdb9 	bl	80001d4 <__adddf3>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4606      	mov	r6, r0
 8004668:	460f      	mov	r7, r1
 800466a:	4640      	mov	r0, r8
 800466c:	4649      	mov	r1, r9
 800466e:	f7fb fdaf 	bl	80001d0 <__aeabi_dsub>
 8004672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004676:	f7fb fdad 	bl	80001d4 <__adddf3>
 800467a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800467e:	e9ca 0100 	strd	r0, r1, [sl]
 8004682:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8004686:	e770      	b.n	800456a <__kernel_rem_pio2+0x4f2>
 8004688:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800468c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8004690:	4630      	mov	r0, r6
 8004692:	ec53 2b17 	vmov	r2, r3, d7
 8004696:	4639      	mov	r1, r7
 8004698:	ed8d 7b04 	vstr	d7, [sp, #16]
 800469c:	f7fb fd9a 	bl	80001d4 <__adddf3>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4680      	mov	r8, r0
 80046a6:	4689      	mov	r9, r1
 80046a8:	4630      	mov	r0, r6
 80046aa:	4639      	mov	r1, r7
 80046ac:	f7fb fd90 	bl	80001d0 <__aeabi_dsub>
 80046b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b4:	f7fb fd8e 	bl	80001d4 <__adddf3>
 80046b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046bc:	e9ca 0100 	strd	r0, r1, [sl]
 80046c0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80046c4:	e756      	b.n	8004574 <__kernel_rem_pio2+0x4fc>
 80046c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80046ca:	f7fb fd83 	bl	80001d4 <__adddf3>
 80046ce:	3d01      	subs	r5, #1
 80046d0:	e756      	b.n	8004580 <__kernel_rem_pio2+0x508>
 80046d2:	9b01      	ldr	r3, [sp, #4]
 80046d4:	9a01      	ldr	r2, [sp, #4]
 80046d6:	601f      	str	r7, [r3, #0]
 80046d8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80046dc:	605c      	str	r4, [r3, #4]
 80046de:	609d      	str	r5, [r3, #8]
 80046e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80046e4:	60d3      	str	r3, [r2, #12]
 80046e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046ea:	6110      	str	r0, [r2, #16]
 80046ec:	6153      	str	r3, [r2, #20]
 80046ee:	e78e      	b.n	800460e <__kernel_rem_pio2+0x596>
 80046f0:	41700000 	.word	0x41700000
 80046f4:	3e700000 	.word	0x3e700000

080046f8 <__kernel_sin>:
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	ec55 4b10 	vmov	r4, r5, d0
 8004700:	b085      	sub	sp, #20
 8004702:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004706:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800470a:	ed8d 1b00 	vstr	d1, [sp]
 800470e:	9002      	str	r0, [sp, #8]
 8004710:	da06      	bge.n	8004720 <__kernel_sin+0x28>
 8004712:	ee10 0a10 	vmov	r0, s0
 8004716:	4629      	mov	r1, r5
 8004718:	f7fc f9ac 	bl	8000a74 <__aeabi_d2iz>
 800471c:	2800      	cmp	r0, #0
 800471e:	d051      	beq.n	80047c4 <__kernel_sin+0xcc>
 8004720:	4622      	mov	r2, r4
 8004722:	462b      	mov	r3, r5
 8004724:	4620      	mov	r0, r4
 8004726:	4629      	mov	r1, r5
 8004728:	f7fb ff0a 	bl	8000540 <__aeabi_dmul>
 800472c:	4682      	mov	sl, r0
 800472e:	468b      	mov	fp, r1
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4620      	mov	r0, r4
 8004736:	4629      	mov	r1, r5
 8004738:	f7fb ff02 	bl	8000540 <__aeabi_dmul>
 800473c:	a341      	add	r3, pc, #260	; (adr r3, 8004844 <__kernel_sin+0x14c>)
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	4680      	mov	r8, r0
 8004744:	4689      	mov	r9, r1
 8004746:	4650      	mov	r0, sl
 8004748:	4659      	mov	r1, fp
 800474a:	f7fb fef9 	bl	8000540 <__aeabi_dmul>
 800474e:	a33f      	add	r3, pc, #252	; (adr r3, 800484c <__kernel_sin+0x154>)
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	f7fb fd3c 	bl	80001d0 <__aeabi_dsub>
 8004758:	4652      	mov	r2, sl
 800475a:	465b      	mov	r3, fp
 800475c:	f7fb fef0 	bl	8000540 <__aeabi_dmul>
 8004760:	a33c      	add	r3, pc, #240	; (adr r3, 8004854 <__kernel_sin+0x15c>)
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	f7fb fd35 	bl	80001d4 <__adddf3>
 800476a:	4652      	mov	r2, sl
 800476c:	465b      	mov	r3, fp
 800476e:	f7fb fee7 	bl	8000540 <__aeabi_dmul>
 8004772:	a33a      	add	r3, pc, #232	; (adr r3, 800485c <__kernel_sin+0x164>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f7fb fd2a 	bl	80001d0 <__aeabi_dsub>
 800477c:	4652      	mov	r2, sl
 800477e:	465b      	mov	r3, fp
 8004780:	f7fb fede 	bl	8000540 <__aeabi_dmul>
 8004784:	a337      	add	r3, pc, #220	; (adr r3, 8004864 <__kernel_sin+0x16c>)
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f7fb fd23 	bl	80001d4 <__adddf3>
 800478e:	9b02      	ldr	r3, [sp, #8]
 8004790:	4606      	mov	r6, r0
 8004792:	460f      	mov	r7, r1
 8004794:	b9db      	cbnz	r3, 80047ce <__kernel_sin+0xd6>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4650      	mov	r0, sl
 800479c:	4659      	mov	r1, fp
 800479e:	f7fb fecf 	bl	8000540 <__aeabi_dmul>
 80047a2:	a325      	add	r3, pc, #148	; (adr r3, 8004838 <__kernel_sin+0x140>)
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f7fb fd12 	bl	80001d0 <__aeabi_dsub>
 80047ac:	4642      	mov	r2, r8
 80047ae:	464b      	mov	r3, r9
 80047b0:	f7fb fec6 	bl	8000540 <__aeabi_dmul>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4620      	mov	r0, r4
 80047ba:	4629      	mov	r1, r5
 80047bc:	f7fb fd0a 	bl	80001d4 <__adddf3>
 80047c0:	4604      	mov	r4, r0
 80047c2:	460d      	mov	r5, r1
 80047c4:	ec45 4b10 	vmov	d0, r4, r5
 80047c8:	b005      	add	sp, #20
 80047ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ce:	2200      	movs	r2, #0
 80047d0:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <__kernel_sin+0x148>)
 80047d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047d6:	f7fb feb3 	bl	8000540 <__aeabi_dmul>
 80047da:	4632      	mov	r2, r6
 80047dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047e0:	463b      	mov	r3, r7
 80047e2:	4640      	mov	r0, r8
 80047e4:	4649      	mov	r1, r9
 80047e6:	f7fb feab 	bl	8000540 <__aeabi_dmul>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047f2:	f7fb fced 	bl	80001d0 <__aeabi_dsub>
 80047f6:	4652      	mov	r2, sl
 80047f8:	465b      	mov	r3, fp
 80047fa:	f7fb fea1 	bl	8000540 <__aeabi_dmul>
 80047fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004802:	f7fb fce5 	bl	80001d0 <__aeabi_dsub>
 8004806:	a30c      	add	r3, pc, #48	; (adr r3, 8004838 <__kernel_sin+0x140>)
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	4606      	mov	r6, r0
 800480e:	460f      	mov	r7, r1
 8004810:	4640      	mov	r0, r8
 8004812:	4649      	mov	r1, r9
 8004814:	f7fb fe94 	bl	8000540 <__aeabi_dmul>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4630      	mov	r0, r6
 800481e:	4639      	mov	r1, r7
 8004820:	f7fb fcd8 	bl	80001d4 <__adddf3>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4620      	mov	r0, r4
 800482a:	4629      	mov	r1, r5
 800482c:	f7fb fcd0 	bl	80001d0 <__aeabi_dsub>
 8004830:	e7c6      	b.n	80047c0 <__kernel_sin+0xc8>
 8004832:	bf00      	nop
 8004834:	f3af 8000 	nop.w
 8004838:	55555549 	.word	0x55555549
 800483c:	3fc55555 	.word	0x3fc55555
 8004840:	3fe00000 	.word	0x3fe00000
 8004844:	5acfd57c 	.word	0x5acfd57c
 8004848:	3de5d93a 	.word	0x3de5d93a
 800484c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004850:	3e5ae5e6 	.word	0x3e5ae5e6
 8004854:	57b1fe7d 	.word	0x57b1fe7d
 8004858:	3ec71de3 	.word	0x3ec71de3
 800485c:	19c161d5 	.word	0x19c161d5
 8004860:	3f2a01a0 	.word	0x3f2a01a0
 8004864:	1110f8a6 	.word	0x1110f8a6
 8004868:	3f811111 	.word	0x3f811111

0800486c <fabs>:
 800486c:	ec51 0b10 	vmov	r0, r1, d0
 8004870:	ee10 2a10 	vmov	r2, s0
 8004874:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004878:	ec43 2b10 	vmov	d0, r2, r3
 800487c:	4770      	bx	lr
	...

08004880 <floor>:
 8004880:	ec51 0b10 	vmov	r0, r1, d0
 8004884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004888:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800488c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004890:	2e13      	cmp	r6, #19
 8004892:	460c      	mov	r4, r1
 8004894:	ee10 5a10 	vmov	r5, s0
 8004898:	4680      	mov	r8, r0
 800489a:	dc34      	bgt.n	8004906 <floor+0x86>
 800489c:	2e00      	cmp	r6, #0
 800489e:	da16      	bge.n	80048ce <floor+0x4e>
 80048a0:	a335      	add	r3, pc, #212	; (adr r3, 8004978 <floor+0xf8>)
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f7fb fc95 	bl	80001d4 <__adddf3>
 80048aa:	2200      	movs	r2, #0
 80048ac:	2300      	movs	r3, #0
 80048ae:	f7fc f8d7 	bl	8000a60 <__aeabi_dcmpgt>
 80048b2:	b148      	cbz	r0, 80048c8 <floor+0x48>
 80048b4:	2c00      	cmp	r4, #0
 80048b6:	da59      	bge.n	800496c <floor+0xec>
 80048b8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80048bc:	4a30      	ldr	r2, [pc, #192]	; (8004980 <floor+0x100>)
 80048be:	432b      	orrs	r3, r5
 80048c0:	2500      	movs	r5, #0
 80048c2:	42ab      	cmp	r3, r5
 80048c4:	bf18      	it	ne
 80048c6:	4614      	movne	r4, r2
 80048c8:	4621      	mov	r1, r4
 80048ca:	4628      	mov	r0, r5
 80048cc:	e025      	b.n	800491a <floor+0x9a>
 80048ce:	4f2d      	ldr	r7, [pc, #180]	; (8004984 <floor+0x104>)
 80048d0:	4137      	asrs	r7, r6
 80048d2:	ea01 0307 	and.w	r3, r1, r7
 80048d6:	4303      	orrs	r3, r0
 80048d8:	d01f      	beq.n	800491a <floor+0x9a>
 80048da:	a327      	add	r3, pc, #156	; (adr r3, 8004978 <floor+0xf8>)
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f7fb fc78 	bl	80001d4 <__adddf3>
 80048e4:	2200      	movs	r2, #0
 80048e6:	2300      	movs	r3, #0
 80048e8:	f7fc f8ba 	bl	8000a60 <__aeabi_dcmpgt>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d0eb      	beq.n	80048c8 <floor+0x48>
 80048f0:	2c00      	cmp	r4, #0
 80048f2:	bfbe      	ittt	lt
 80048f4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80048f8:	fa43 f606 	asrlt.w	r6, r3, r6
 80048fc:	19a4      	addlt	r4, r4, r6
 80048fe:	ea24 0407 	bic.w	r4, r4, r7
 8004902:	2500      	movs	r5, #0
 8004904:	e7e0      	b.n	80048c8 <floor+0x48>
 8004906:	2e33      	cmp	r6, #51	; 0x33
 8004908:	dd0b      	ble.n	8004922 <floor+0xa2>
 800490a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800490e:	d104      	bne.n	800491a <floor+0x9a>
 8004910:	ee10 2a10 	vmov	r2, s0
 8004914:	460b      	mov	r3, r1
 8004916:	f7fb fc5d 	bl	80001d4 <__adddf3>
 800491a:	ec41 0b10 	vmov	d0, r0, r1
 800491e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004922:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004926:	f04f 33ff 	mov.w	r3, #4294967295
 800492a:	fa23 f707 	lsr.w	r7, r3, r7
 800492e:	4207      	tst	r7, r0
 8004930:	d0f3      	beq.n	800491a <floor+0x9a>
 8004932:	a311      	add	r3, pc, #68	; (adr r3, 8004978 <floor+0xf8>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f7fb fc4c 	bl	80001d4 <__adddf3>
 800493c:	2200      	movs	r2, #0
 800493e:	2300      	movs	r3, #0
 8004940:	f7fc f88e 	bl	8000a60 <__aeabi_dcmpgt>
 8004944:	2800      	cmp	r0, #0
 8004946:	d0bf      	beq.n	80048c8 <floor+0x48>
 8004948:	2c00      	cmp	r4, #0
 800494a:	da02      	bge.n	8004952 <floor+0xd2>
 800494c:	2e14      	cmp	r6, #20
 800494e:	d103      	bne.n	8004958 <floor+0xd8>
 8004950:	3401      	adds	r4, #1
 8004952:	ea25 0507 	bic.w	r5, r5, r7
 8004956:	e7b7      	b.n	80048c8 <floor+0x48>
 8004958:	2301      	movs	r3, #1
 800495a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800495e:	fa03 f606 	lsl.w	r6, r3, r6
 8004962:	4435      	add	r5, r6
 8004964:	4545      	cmp	r5, r8
 8004966:	bf38      	it	cc
 8004968:	18e4      	addcc	r4, r4, r3
 800496a:	e7f2      	b.n	8004952 <floor+0xd2>
 800496c:	2500      	movs	r5, #0
 800496e:	462c      	mov	r4, r5
 8004970:	e7aa      	b.n	80048c8 <floor+0x48>
 8004972:	bf00      	nop
 8004974:	f3af 8000 	nop.w
 8004978:	8800759c 	.word	0x8800759c
 800497c:	7e37e43c 	.word	0x7e37e43c
 8004980:	bff00000 	.word	0xbff00000
 8004984:	000fffff 	.word	0x000fffff

08004988 <scalbn>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	ec55 4b10 	vmov	r4, r5, d0
 800498e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004992:	4606      	mov	r6, r0
 8004994:	462b      	mov	r3, r5
 8004996:	b9aa      	cbnz	r2, 80049c4 <scalbn+0x3c>
 8004998:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800499c:	4323      	orrs	r3, r4
 800499e:	d03b      	beq.n	8004a18 <scalbn+0x90>
 80049a0:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <scalbn+0xe0>)
 80049a2:	4629      	mov	r1, r5
 80049a4:	2200      	movs	r2, #0
 80049a6:	ee10 0a10 	vmov	r0, s0
 80049aa:	f7fb fdc9 	bl	8000540 <__aeabi_dmul>
 80049ae:	4b2f      	ldr	r3, [pc, #188]	; (8004a6c <scalbn+0xe4>)
 80049b0:	429e      	cmp	r6, r3
 80049b2:	4604      	mov	r4, r0
 80049b4:	460d      	mov	r5, r1
 80049b6:	da12      	bge.n	80049de <scalbn+0x56>
 80049b8:	a327      	add	r3, pc, #156	; (adr r3, 8004a58 <scalbn+0xd0>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f7fb fdbf 	bl	8000540 <__aeabi_dmul>
 80049c2:	e009      	b.n	80049d8 <scalbn+0x50>
 80049c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80049c8:	428a      	cmp	r2, r1
 80049ca:	d10c      	bne.n	80049e6 <scalbn+0x5e>
 80049cc:	ee10 2a10 	vmov	r2, s0
 80049d0:	4620      	mov	r0, r4
 80049d2:	4629      	mov	r1, r5
 80049d4:	f7fb fbfe 	bl	80001d4 <__adddf3>
 80049d8:	4604      	mov	r4, r0
 80049da:	460d      	mov	r5, r1
 80049dc:	e01c      	b.n	8004a18 <scalbn+0x90>
 80049de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80049e2:	460b      	mov	r3, r1
 80049e4:	3a36      	subs	r2, #54	; 0x36
 80049e6:	4432      	add	r2, r6
 80049e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80049ec:	428a      	cmp	r2, r1
 80049ee:	dd0b      	ble.n	8004a08 <scalbn+0x80>
 80049f0:	ec45 4b11 	vmov	d1, r4, r5
 80049f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004a60 <scalbn+0xd8>
 80049f8:	f000 f83c 	bl	8004a74 <copysign>
 80049fc:	a318      	add	r3, pc, #96	; (adr r3, 8004a60 <scalbn+0xd8>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	ec51 0b10 	vmov	r0, r1, d0
 8004a06:	e7da      	b.n	80049be <scalbn+0x36>
 8004a08:	2a00      	cmp	r2, #0
 8004a0a:	dd08      	ble.n	8004a1e <scalbn+0x96>
 8004a0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a18:	ec45 4b10 	vmov	d0, r4, r5
 8004a1c:	bd70      	pop	{r4, r5, r6, pc}
 8004a1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004a22:	da0d      	bge.n	8004a40 <scalbn+0xb8>
 8004a24:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004a28:	429e      	cmp	r6, r3
 8004a2a:	ec45 4b11 	vmov	d1, r4, r5
 8004a2e:	dce1      	bgt.n	80049f4 <scalbn+0x6c>
 8004a30:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004a58 <scalbn+0xd0>
 8004a34:	f000 f81e 	bl	8004a74 <copysign>
 8004a38:	a307      	add	r3, pc, #28	; (adr r3, 8004a58 <scalbn+0xd0>)
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	e7e0      	b.n	8004a02 <scalbn+0x7a>
 8004a40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a44:	3236      	adds	r2, #54	; 0x36
 8004a46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	2200      	movs	r2, #0
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <scalbn+0xe8>)
 8004a56:	e7b2      	b.n	80049be <scalbn+0x36>
 8004a58:	c2f8f359 	.word	0xc2f8f359
 8004a5c:	01a56e1f 	.word	0x01a56e1f
 8004a60:	8800759c 	.word	0x8800759c
 8004a64:	7e37e43c 	.word	0x7e37e43c
 8004a68:	43500000 	.word	0x43500000
 8004a6c:	ffff3cb0 	.word	0xffff3cb0
 8004a70:	3c900000 	.word	0x3c900000

08004a74 <copysign>:
 8004a74:	ec51 0b10 	vmov	r0, r1, d0
 8004a78:	ee11 0a90 	vmov	r0, s3
 8004a7c:	ee10 2a10 	vmov	r2, s0
 8004a80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004a84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004a88:	ea41 0300 	orr.w	r3, r1, r0
 8004a8c:	ec43 2b10 	vmov	d0, r2, r3
 8004a90:	4770      	bx	lr
	...

08004a94 <_init>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	bf00      	nop
 8004a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9a:	bc08      	pop	{r3}
 8004a9c:	469e      	mov	lr, r3
 8004a9e:	4770      	bx	lr

08004aa0 <_fini>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	bf00      	nop
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr
